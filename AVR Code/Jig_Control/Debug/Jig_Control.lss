
Jig_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00800060  000030c8  0000313c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000026e8  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fca  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000068d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000087cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000096ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a855  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b023  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 34       	cpi	r26, 0x48	; 72
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e3       	ldi	r26, 0x38	; 56
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e3       	ldi	r24, 0x38	; 56
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "util/delay.h"

UART_ConfigType uart_Config = {Frame_8_bit,Parity_Disable,Stop_1_bit,Buad_Rate_9600};

int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	62 97       	sbiw	r28, 0x12	; 18
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	uint8 J1_Num_Pressed = 0;
     b4a:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 J2_Num_Pressed = 0;
     b4c:	19 8a       	std	Y+17, r1	; 0x11
	uint8 J3_Num_Pressed = 0;
     b4e:	18 8a       	std	Y+16, r1	; 0x10
	uint8 key_value = 0;
     b50:	1f 86       	std	Y+15, r1	; 0x0f

	/* Red Led */
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

	/* Green Led */
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

	/* Yellow Led */
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	62 e0       	ldi	r22, 0x02	; 2
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	62 e0       	ldi	r22, 0x02	; 2
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

	/* Initialize the UART for send data that controlled by the PYTHON script  */
	UART_init(&uart_Config);
     b8e:	80 e4       	ldi	r24, 0x40	; 64
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <UART_init>
	/* Initialize the LCD for showing the status of Jig */
	LCD_init();
     b96:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_init>
		LCD_moveCursor(0,4);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	64 e0       	ldi	r22, 0x04	; 4
     b9e:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
		LCD_displayString("Jig Test");
     ba2:	80 e6       	ldi	r24, 0x60	; 96
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
		LCD_moveCursor(1,0);
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
		LCD_displayString("JigX Status:OFF");
     bb2:	89 e6       	ldi	r24, 0x69	; 105
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>

	while(1)
	{
		key_value = KEYPAD_getPressedKey();
     bba:	0e 94 9f 0a 	call	0x153e	; 0x153e <KEYPAD_getPressedKey>
     bbe:	8f 87       	std	Y+15, r24	; 0x0f

		if(key_value == '7' - '0')
     bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc2:	87 30       	cpi	r24, 0x07	; 7
     bc4:	d9 f4       	brne	.+54     	; 0xbfc <main+0xc6>
		{
			UART_sendString("1W");
     bc6:	89 e7       	ldi	r24, 0x79	; 121
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig1 Status:ON  ");
     bd6:	8c e7       	ldi	r24, 0x7C	; 124
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '8' - '0')
     bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfe:	88 30       	cpi	r24, 0x08	; 8
     c00:	d9 f4       	brne	.+54     	; 0xc38 <main+0x102>
		{
			UART_sendString("1P");
     c02:	8d e8       	ldi	r24, 0x8D	; 141
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig1 Status:Pause ");
     c12:	80 e9       	ldi	r24, 0x90	; 144
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	61 e0       	ldi	r22, 0x01	; 1
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '9' - '0')
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	89 30       	cpi	r24, 0x09	; 9
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <main+0x13e>
		{
			UART_sendString("1S");
     c3e:	83 ea       	ldi	r24, 0xA3	; 163
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig1 Status:OFF  ");
     c4e:	86 ea       	ldi	r24, 0xA6	; 166
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '4'- '0')
     c74:	8f 85       	ldd	r24, Y+15	; 0x0f
     c76:	84 30       	cpi	r24, 0x04	; 4
     c78:	d9 f4       	brne	.+54     	; 0xcb0 <main+0x17a>
		{
			UART_sendString("2W");
     c7a:	88 eb       	ldi	r24, 0xB8	; 184
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig2 Status:ON  ");
     c8a:	8b eb       	ldi	r24, 0xBB	; 187
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	61 e0       	ldi	r22, 0x01	; 1
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '5'- '0')
     cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	d9 f4       	brne	.+54     	; 0xcec <main+0x1b6>
		{
			UART_sendString("2P");
     cb6:	8c ec       	ldi	r24, 0xCC	; 204
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig2 Status:Pause  ");
     cc6:	8f ec       	ldi	r24, 0xCF	; 207
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '6'- '0')
     cec:	8f 85       	ldd	r24, Y+15	; 0x0f
     cee:	86 30       	cpi	r24, 0x06	; 6
     cf0:	d9 f4       	brne	.+54     	; 0xd28 <main+0x1f2>
		{
			UART_sendString("2S");
     cf2:	83 ee       	ldi	r24, 0xE3	; 227
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig2 Status:OFF  ");
     d02:	86 ee       	ldi	r24, 0xE6	; 230
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '1'- '0')
     d28:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	d9 f4       	brne	.+54     	; 0xd64 <main+0x22e>
		{
			UART_sendString("3W");
     d2e:	88 ef       	ldi	r24, 0xF8	; 248
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig3 Status:ON  ");
     d3e:	8b ef       	ldi	r24, 0xFB	; 251
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '2'- '0')
     d64:	8f 85       	ldd	r24, Y+15	; 0x0f
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	d9 f4       	brne	.+54     	; 0xda0 <main+0x26a>
		{
			UART_sendString("3P");
     d6a:	8c e0       	ldi	r24, 0x0C	; 12
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig3 Status:Pause  ");
     d7a:	8f e0       	ldi	r24, 0x0F	; 15
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	62 e0       	ldi	r22, 0x02	; 2
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	61 e0       	ldi	r22, 0x01	; 1
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
		}

		if(key_value == '3'- '0')
     da0:	8f 85       	ldd	r24, Y+15	; 0x0f
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	d9 f4       	brne	.+54     	; 0xddc <main+0x2a6>
		{
			UART_sendString("3S");
     da6:	83 e2       	ldi	r24, 0x23	; 35
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <UART_sendString>
			LCD_moveCursor(1,0);
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
			LCD_displayString("Jig3 Status:OFF  ");
     db6:	86 e2       	ldi	r24, 0x26	; 38
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
			GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
			GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	62 e0       	ldi	r22, 0x02	; 2
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	aa e7       	ldi	r26, 0x7A	; 122
     de2:	b3 e4       	ldi	r27, 0x43	; 67
     de4:	8b 87       	std	Y+11, r24	; 0x0b
     de6:	9c 87       	std	Y+12, r25	; 0x0c
     de8:	ad 87       	std	Y+13, r26	; 0x0d
     dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dec:	6b 85       	ldd	r22, Y+11	; 0x0b
     dee:	7c 85       	ldd	r23, Y+12	; 0x0c
     df0:	8d 85       	ldd	r24, Y+13	; 0x0d
     df2:	9e 85       	ldd	r25, Y+14	; 0x0e
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	4a e7       	ldi	r20, 0x7A	; 122
     dfa:	55 e4       	ldi	r21, 0x45	; 69
     dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	8f 83       	std	Y+7, r24	; 0x07
     e06:	98 87       	std	Y+8, r25	; 0x08
     e08:	a9 87       	std	Y+9, r26	; 0x09
     e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e8       	ldi	r20, 0x80	; 128
     e1a:	5f e3       	ldi	r21, 0x3F	; 63
     e1c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e20:	88 23       	and	r24, r24
     e22:	2c f4       	brge	.+10     	; 0xe2e <main+0x2f8>
		__ticks = 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9e 83       	std	Y+6, r25	; 0x06
     e2a:	8d 83       	std	Y+5, r24	; 0x05
     e2c:	3f c0       	rjmp	.+126    	; 0xeac <main+0x376>
	else if (__tmp > 65535)
     e2e:	6f 81       	ldd	r22, Y+7	; 0x07
     e30:	78 85       	ldd	r23, Y+8	; 0x08
     e32:	89 85       	ldd	r24, Y+9	; 0x09
     e34:	9a 85       	ldd	r25, Y+10	; 0x0a
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	4c f5       	brge	.+82     	; 0xe98 <main+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	6b 85       	ldd	r22, Y+11	; 0x0b
     e48:	7c 85       	ldd	r23, Y+12	; 0x0c
     e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e2       	ldi	r20, 0x20	; 32
     e54:	51 e4       	ldi	r21, 0x41	; 65
     e56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <main+0x358>
     e70:	80 e9       	ldi	r24, 0x90	; 144
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	f1 f7       	brne	.-4      	; 0xe7c <main+0x346>
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	9e 83       	std	Y+6, r25	; 0x06
     e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	9e 81       	ldd	r25, Y+6	; 0x06
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	69 f7       	brne	.-38     	; 0xe70 <main+0x33a>
     e96:	91 ce       	rjmp	.-734    	; 0xbba <main+0x84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
     eac:	8d 81       	ldd	r24, Y+5	; 0x05
     eae:	9e 81       	ldd	r25, Y+6	; 0x06
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <main+0x382>
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	7c ce       	rjmp	.-776    	; 0xbba <main+0x84>

00000ec2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <GPIO_setupPinDirection+0x6>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <GPIO_setupPinDirection+0x8>
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	08 f0       	brcs	.+2      	; 0xede <GPIO_setupPinDirection+0x1c>
     edc:	d5 c0       	rjmp	.+426    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <GPIO_setupPinDirection+0x24>
     ee4:	d1 c0       	rjmp	.+418    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3d 83       	std	Y+5, r19	; 0x05
     eee:	2c 83       	std	Y+4, r18	; 0x04
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	09 f4       	brne	.+2      	; 0xefc <GPIO_setupPinDirection+0x3a>
     efa:	43 c0       	rjmp	.+134    	; 0xf82 <GPIO_setupPinDirection+0xc0>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	2c f4       	brge	.+10     	; 0xf10 <GPIO_setupPinDirection+0x4e>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	71 f0       	breq	.+28     	; 0xf2a <GPIO_setupPinDirection+0x68>
     f0e:	bc c0       	rjmp	.+376    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <GPIO_setupPinDirection+0x5a>
     f1a:	5f c0       	rjmp	.+190    	; 0xfda <GPIO_setupPinDirection+0x118>
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	9d 81       	ldd	r25, Y+5	; 0x05
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	91 05       	cpc	r25, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <GPIO_setupPinDirection+0x66>
     f26:	85 c0       	rjmp	.+266    	; 0x1032 <GPIO_setupPinDirection+0x170>
     f28:	af c0       	rjmp	.+350    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	a1 f4       	brne	.+40     	; 0xf58 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f30:	aa e3       	ldi	r26, 0x3A	; 58
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <GPIO_setupPinDirection+0x8c>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <GPIO_setupPinDirection+0x88>
     f52:	84 2b       	or	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	98 c0       	rjmp	.+304    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f58:	aa e3       	ldi	r26, 0x3A	; 58
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <GPIO_setupPinDirection+0xb4>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <GPIO_setupPinDirection+0xb0>
     f7a:	80 95       	com	r24
     f7c:	84 23       	and	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	83 c0       	rjmp	.+262    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	a1 f4       	brne	.+40     	; 0xfb0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f88:	a7 e3       	ldi	r26, 0x37	; 55
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e3       	ldi	r30, 0x37	; 55
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <GPIO_setupPinDirection+0xe4>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <GPIO_setupPinDirection+0xe0>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	6c c0       	rjmp	.+216    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_setupPinDirection+0x10c>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_setupPinDirection+0x108>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	57 c0       	rjmp	.+174    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	a1 f4       	brne	.+40     	; 0x1008 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_setupPinDirection+0x13c>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_setupPinDirection+0x138>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	40 c0       	rjmp	.+128    	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_setupPinDirection+0x164>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_setupPinDirection+0x160>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	2b c0       	rjmp	.+86     	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	a1 f4       	brne	.+40     	; 0x1060 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1038:	a1 e3       	ldi	r26, 0x31	; 49
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e1 e3       	ldi	r30, 0x31	; 49
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_setupPinDirection+0x194>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_setupPinDirection+0x190>
    105a:	84 2b       	or	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1060:	a1 e3       	ldi	r26, 0x31	; 49
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_setupPinDirection+0x1bc>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_setupPinDirection+0x1b8>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <GPIO_writePin+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <GPIO_writePin+0x8>
    10a0:	0f 92       	push	r0
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	6a 83       	std	Y+2, r22	; 0x02
    10aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	88 30       	cpi	r24, 0x08	; 8
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <GPIO_writePin+0x1c>
    10b2:	d5 c0       	rjmp	.+426    	; 0x125e <GPIO_writePin+0x1c6>
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	84 30       	cpi	r24, 0x04	; 4
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <GPIO_writePin+0x24>
    10ba:	d1 c0       	rjmp	.+418    	; 0x125e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3d 83       	std	Y+5, r19	; 0x05
    10c4:	2c 83       	std	Y+4, r18	; 0x04
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <GPIO_writePin+0x3a>
    10d0:	43 c0       	rjmp	.+134    	; 0x1158 <GPIO_writePin+0xc0>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <GPIO_writePin+0x4e>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	71 f0       	breq	.+28     	; 0x1100 <GPIO_writePin+0x68>
    10e4:	bc c0       	rjmp	.+376    	; 0x125e <GPIO_writePin+0x1c6>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <GPIO_writePin+0x5a>
    10f0:	5f c0       	rjmp	.+190    	; 0x11b0 <GPIO_writePin+0x118>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <GPIO_writePin+0x66>
    10fc:	85 c0       	rjmp	.+266    	; 0x1208 <GPIO_writePin+0x170>
    10fe:	af c0       	rjmp	.+350    	; 0x125e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	a1 f4       	brne	.+40     	; 0x112e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <GPIO_writePin+0x8c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <GPIO_writePin+0x88>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	98 c0       	rjmp	.+304    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    112e:	ab e3       	ldi	r26, 0x3B	; 59
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_writePin+0xb4>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_writePin+0xb0>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	83 c0       	rjmp	.+262    	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	a1 f4       	brne	.+40     	; 0x1186 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    115e:	a8 e3       	ldi	r26, 0x38	; 56
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_writePin+0xe4>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_writePin+0xe0>
    1180:	84 2b       	or	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	6c c0       	rjmp	.+216    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_writePin+0x10c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_writePin+0x108>
    11a8:	80 95       	com	r24
    11aa:	84 23       	and	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	57 c0       	rjmp	.+174    	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	a1 f4       	brne	.+40     	; 0x11de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11b6:	a5 e3       	ldi	r26, 0x35	; 53
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e5 e3       	ldi	r30, 0x35	; 53
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_writePin+0x13c>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_writePin+0x138>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_writePin+0x164>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_writePin+0x160>
    1200:	80 95       	com	r24
    1202:	84 23       	and	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	2b c0       	rjmp	.+86     	; 0x125e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	a1 f4       	brne	.+40     	; 0x1236 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    120e:	a2 e3       	ldi	r26, 0x32	; 50
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e2 e3       	ldi	r30, 0x32	; 50
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_writePin+0x194>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_writePin+0x190>
    1230:	84 2b       	or	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	14 c0       	rjmp	.+40     	; 0x125e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1236:	a2 e3       	ldi	r26, 0x32	; 50
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_writePin+0x1bc>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_writePin+0x1b8>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <GPIO_readPin+0x6>
    1274:	00 d0       	rcall	.+0      	; 0x1276 <GPIO_readPin+0x8>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1280:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	08 f0       	brcs	.+2      	; 0x128a <GPIO_readPin+0x1c>
    1288:	84 c0       	rjmp	.+264    	; 0x1392 <GPIO_readPin+0x124>
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <GPIO_readPin+0x24>
    1290:	80 c0       	rjmp	.+256    	; 0x1392 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	3d 83       	std	Y+5, r19	; 0x05
    129a:	2c 83       	std	Y+4, r18	; 0x04
    129c:	4c 81       	ldd	r20, Y+4	; 0x04
    129e:	5d 81       	ldd	r21, Y+5	; 0x05
    12a0:	41 30       	cpi	r20, 0x01	; 1
    12a2:	51 05       	cpc	r21, r1
    12a4:	79 f1       	breq	.+94     	; 0x1304 <GPIO_readPin+0x96>
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
    12aa:	82 30       	cpi	r24, 0x02	; 2
    12ac:	91 05       	cpc	r25, r1
    12ae:	34 f4       	brge	.+12     	; 0x12bc <GPIO_readPin+0x4e>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	21 15       	cp	r18, r1
    12b6:	31 05       	cpc	r19, r1
    12b8:	69 f0       	breq	.+26     	; 0x12d4 <GPIO_readPin+0x66>
    12ba:	6b c0       	rjmp	.+214    	; 0x1392 <GPIO_readPin+0x124>
    12bc:	4c 81       	ldd	r20, Y+4	; 0x04
    12be:	5d 81       	ldd	r21, Y+5	; 0x05
    12c0:	42 30       	cpi	r20, 0x02	; 2
    12c2:	51 05       	cpc	r21, r1
    12c4:	b9 f1       	breq	.+110    	; 0x1334 <GPIO_readPin+0xc6>
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <GPIO_readPin+0x64>
    12d0:	49 c0       	rjmp	.+146    	; 0x1364 <GPIO_readPin+0xf6>
    12d2:	5f c0       	rjmp	.+190    	; 0x1392 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    12d4:	e9 e3       	ldi	r30, 0x39	; 57
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <GPIO_readPin+0x7e>
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	8a 95       	dec	r24
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <GPIO_readPin+0x7a>
    12f0:	ca 01       	movw	r24, r20
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	88 23       	and	r24, r24
    12f8:	19 f0       	breq	.+6      	; 0x1300 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01
    12fe:	49 c0       	rjmp	.+146    	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	47 c0       	rjmp	.+142    	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1304:	e6 e3       	ldi	r30, 0x36	; 54
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_readPin+0xae>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_readPin+0xaa>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	88 23       	and	r24, r24
    1328:	19 f0       	breq	.+6      	; 0x1330 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	31 c0       	rjmp	.+98     	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	2f c0       	rjmp	.+94     	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1334:	e3 e3       	ldi	r30, 0x33	; 51
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_readPin+0xde>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_readPin+0xda>
    1350:	ca 01       	movw	r24, r20
    1352:	81 70       	andi	r24, 0x01	; 1
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	88 23       	and	r24, r24
    1358:	19 f0       	breq	.+6      	; 0x1360 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	19 c0       	rjmp	.+50     	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	17 c0       	rjmp	.+46     	; 0x1392 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1364:	e0 e3       	ldi	r30, 0x30	; 48
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GPIO_readPin+0x10e>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GPIO_readPin+0x10a>
    1380:	ca 01       	movw	r24, r20
    1382:	81 70       	andi	r24, 0x01	; 1
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	88 23       	and	r24, r24
    1388:	19 f0       	breq	.+6      	; 0x1390 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1390:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <GPIO_setupPortDirection+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <GPIO_setupPortDirection+0x8>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	84 30       	cpi	r24, 0x04	; 4
    13b8:	90 f5       	brcc	.+100    	; 0x141e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	81 30       	cpi	r24, 0x01	; 1
    13ca:	91 05       	cpc	r25, r1
    13cc:	d1 f0       	breq	.+52     	; 0x1402 <GPIO_setupPortDirection+0x5e>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	2c f4       	brge	.+10     	; 0x13e2 <GPIO_setupPortDirection+0x3e>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	61 f0       	breq	.+24     	; 0x13f8 <GPIO_setupPortDirection+0x54>
    13e0:	1e c0       	rjmp	.+60     	; 0x141e <GPIO_setupPortDirection+0x7a>
    13e2:	2b 81       	ldd	r18, Y+3	; 0x03
    13e4:	3c 81       	ldd	r19, Y+4	; 0x04
    13e6:	22 30       	cpi	r18, 0x02	; 2
    13e8:	31 05       	cpc	r19, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <GPIO_setupPortDirection+0x68>
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	81 f0       	breq	.+32     	; 0x1416 <GPIO_setupPortDirection+0x72>
    13f6:	13 c0       	rjmp	.+38     	; 0x141e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    13f8:	ea e3       	ldi	r30, 0x3A	; 58
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	80 83       	st	Z, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1402:	e7 e3       	ldi	r30, 0x37	; 55
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	09 c0       	rjmp	.+18     	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1416:	e1 e3       	ldi	r30, 0x31	; 49
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	80 83       	st	Z, r24
			break;
		}
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GPIO_writePort+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_writePort+0x8>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	90 f5       	brcc	.+100    	; 0x14a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	d1 f0       	breq	.+52     	; 0x148a <GPIO_writePort+0x5e>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <GPIO_writePort+0x3e>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <GPIO_writePort+0x54>
    1468:	1e c0       	rjmp	.+60     	; 0x14a6 <GPIO_writePort+0x7a>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <GPIO_writePort+0x68>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <GPIO_writePort+0x72>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1480:	eb e3       	ldi	r30, 0x3B	; 59
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1494:	e5 e3       	ldi	r30, 0x35	; 53
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    149e:	e2 e3       	ldi	r30, 0x32	; 50
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_readPort+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_readPort+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	90 f5       	brcc	.+100    	; 0x152e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <GPIO_readPort+0x5e>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_readPort+0x3e>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <GPIO_readPort+0x54>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <GPIO_readPort+0x7a>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_readPort+0x68>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <GPIO_readPort+0x72>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1508:	e9 e3       	ldi	r30, 0x39	; 57
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	0e c0       	rjmp	.+28     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1512:	e6 e3       	ldi	r30, 0x36	; 54
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	09 c0       	rjmp	.+18     	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    151c:	e3 e3       	ldi	r30, 0x33	; 51
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	04 c0       	rjmp	.+8      	; 0x152e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1526:	e0 e3       	ldi	r30, 0x30	; 48
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    152e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	60 97       	sbiw	r28, 0x10	; 16
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	64 e0       	ldi	r22, 0x04	; 4
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	65 e0       	ldi	r22, 0x05	; 5
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	66 e0       	ldi	r22, 0x06	; 6
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	67 e0       	ldi	r22, 0x07	; 7
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    157a:	83 e0       	ldi	r24, 0x03	; 3
    157c:	62 e0       	ldi	r22, 0x02	; 2
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	64 e0       	ldi	r22, 0x04	; 4
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	40 e0       	ldi	r20, 0x00	; 0
    159e:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    15a2:	1f 86       	std	Y+15, r1	; 0x0f
    15a4:	b4 c0       	rjmp	.+360    	; 0x170e <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 2f       	mov	r25, r24
    15aa:	9c 5f       	subi	r25, 0xFC	; 252
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	69 2f       	mov	r22, r25
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    15b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b8:	98 2f       	mov	r25, r24
    15ba:	9c 5f       	subi	r25, 0xFC	; 252
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	69 2f       	mov	r22, r25
    15c0:	40 e0       	ldi	r20, 0x00	; 0
    15c2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    15c6:	18 8a       	std	Y+16, r1	; 0x10
    15c8:	22 c0       	rjmp	.+68     	; 0x160e <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    15ca:	88 89       	ldd	r24, Y+16	; 0x10
    15cc:	98 2f       	mov	r25, r24
    15ce:	9e 5f       	subi	r25, 0xFE	; 254
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	69 2f       	mov	r22, r25
    15d4:	0e 94 37 09 	call	0x126e	; 0x126e <GPIO_readPin>
    15d8:	88 23       	and	r24, r24
    15da:	b1 f4       	brne	.+44     	; 0x1608 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	98 2f       	mov	r25, r24
    15ec:	88 89       	ldd	r24, Y+16	; 0x10
    15ee:	89 0f       	add	r24, r25
    15f0:	8f 5f       	subi	r24, 0xFF	; 255
    15f2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    15f6:	60 96       	adiw	r28, 0x10	; 16
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1608:	88 89       	ldd	r24, Y+16	; 0x10
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	88 8b       	std	Y+16, r24	; 0x10
    160e:	88 89       	ldd	r24, Y+16	; 0x10
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	d8 f2       	brcs	.-74     	; 0x15ca <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	98 2f       	mov	r25, r24
    1618:	9c 5f       	subi	r25, 0xFC	; 252
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	69 2f       	mov	r22, r25
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	a0 ea       	ldi	r26, 0xA0	; 160
    162a:	b0 e4       	ldi	r27, 0x40	; 64
    162c:	8b 87       	std	Y+11, r24	; 0x0b
    162e:	9c 87       	std	Y+12, r25	; 0x0c
    1630:	ad 87       	std	Y+13, r26	; 0x0d
    1632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a e7       	ldi	r20, 0x7A	; 122
    1642:	55 e4       	ldi	r21, 0x45	; 69
    1644:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	8f 83       	std	Y+7, r24	; 0x07
    164e:	98 87       	std	Y+8, r25	; 0x08
    1650:	a9 87       	std	Y+9, r26	; 0x09
    1652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1654:	6f 81       	ldd	r22, Y+7	; 0x07
    1656:	78 85       	ldd	r23, Y+8	; 0x08
    1658:	89 85       	ldd	r24, Y+9	; 0x09
    165a:	9a 85       	ldd	r25, Y+10	; 0x0a
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	3f c0       	rjmp	.+126    	; 0x16f4 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1676:	6f 81       	ldd	r22, Y+7	; 0x07
    1678:	78 85       	ldd	r23, Y+8	; 0x08
    167a:	89 85       	ldd	r24, Y+9	; 0x09
    167c:	9a 85       	ldd	r25, Y+10	; 0x0a
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	57 e4       	ldi	r21, 0x47	; 71
    1686:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    168a:	18 16       	cp	r1, r24
    168c:	4c f5       	brge	.+82     	; 0x16e0 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1690:	7c 85       	ldd	r23, Y+12	; 0x0c
    1692:	8d 85       	ldd	r24, Y+13	; 0x0d
    1694:	9e 85       	ldd	r25, Y+14	; 0x0e
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	0f c0       	rjmp	.+30     	; 0x16d6 <KEYPAD_getPressedKey+0x198>
    16b8:	80 e9       	ldi	r24, 0x90	; 144
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	9c 81       	ldd	r25, Y+4	; 0x04
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	f1 f7       	brne	.-4      	; 0x16c4 <KEYPAD_getPressedKey+0x186>
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f7       	brne	.-38     	; 0x16b8 <KEYPAD_getPressedKey+0x17a>
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	9a 83       	std	Y+2, r25	; 0x02
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <KEYPAD_getPressedKey+0x1c2>
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1708:	8f 85       	ldd	r24, Y+15	; 0x0f
    170a:	8f 5f       	subi	r24, 0xFF	; 255
    170c:	8f 87       	std	Y+15, r24	; 0x0f
    170e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1710:	84 30       	cpi	r24, 0x04	; 4
    1712:	08 f4       	brcc	.+2      	; 0x1716 <KEYPAD_getPressedKey+0x1d8>
    1714:	48 cf       	rjmp	.-368    	; 0x15a6 <KEYPAD_getPressedKey+0x68>
    1716:	45 cf       	rjmp	.-374    	; 0x15a2 <KEYPAD_getPressedKey+0x64>

00001718 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <KEYPAD_4x4_adjustKeyNumber+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1726:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3c 83       	std	Y+4, r19	; 0x04
    1730:	2b 83       	std	Y+3, r18	; 0x03
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	9c 81       	ldd	r25, Y+4	; 0x04
    1736:	88 30       	cpi	r24, 0x08	; 8
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <KEYPAD_4x4_adjustKeyNumber+0x26>
    173c:	70 c0       	rjmp	.+224    	; 0x181e <KEYPAD_4x4_adjustKeyNumber+0x106>
    173e:	2b 81       	ldd	r18, Y+3	; 0x03
    1740:	3c 81       	ldd	r19, Y+4	; 0x04
    1742:	29 30       	cpi	r18, 0x09	; 9
    1744:	31 05       	cpc	r19, r1
    1746:	5c f5       	brge	.+86     	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	9c 81       	ldd	r25, Y+4	; 0x04
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	91 05       	cpc	r25, r1
    1750:	09 f4       	brne	.+2      	; 0x1754 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1752:	59 c0       	rjmp	.+178    	; 0x1806 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1754:	2b 81       	ldd	r18, Y+3	; 0x03
    1756:	3c 81       	ldd	r19, Y+4	; 0x04
    1758:	25 30       	cpi	r18, 0x05	; 5
    175a:	31 05       	cpc	r19, r1
    175c:	9c f4       	brge	.+38     	; 0x1784 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	82 30       	cpi	r24, 0x02	; 2
    1764:	91 05       	cpc	r25, r1
    1766:	09 f4       	brne	.+2      	; 0x176a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1768:	48 c0       	rjmp	.+144    	; 0x17fa <KEYPAD_4x4_adjustKeyNumber+0xe2>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	31 05       	cpc	r19, r1
    1772:	0c f0       	brlt	.+2      	; 0x1776 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1774:	45 c0       	rjmp	.+138    	; 0x1800 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1780:	39 c0       	rjmp	.+114    	; 0x17f4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1782:	67 c0       	rjmp	.+206    	; 0x1852 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1784:	2b 81       	ldd	r18, Y+3	; 0x03
    1786:	3c 81       	ldd	r19, Y+4	; 0x04
    1788:	26 30       	cpi	r18, 0x06	; 6
    178a:	31 05       	cpc	r19, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <KEYPAD_4x4_adjustKeyNumber+0x78>
    178e:	41 c0       	rjmp	.+130    	; 0x1812 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	87 30       	cpi	r24, 0x07	; 7
    1796:	91 05       	cpc	r25, r1
    1798:	0c f0       	brlt	.+2      	; 0x179c <KEYPAD_4x4_adjustKeyNumber+0x84>
    179a:	3e c0       	rjmp	.+124    	; 0x1818 <KEYPAD_4x4_adjustKeyNumber+0x100>
    179c:	37 c0       	rjmp	.+110    	; 0x180c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	2c 30       	cpi	r18, 0x0C	; 12
    17a4:	31 05       	cpc	r19, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <KEYPAD_4x4_adjustKeyNumber+0x92>
    17a8:	46 c0       	rjmp	.+140    	; 0x1836 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	8d 30       	cpi	r24, 0x0D	; 13
    17b0:	91 05       	cpc	r25, r1
    17b2:	5c f4       	brge	.+22     	; 0x17ca <KEYPAD_4x4_adjustKeyNumber+0xb2>
    17b4:	2b 81       	ldd	r18, Y+3	; 0x03
    17b6:	3c 81       	ldd	r19, Y+4	; 0x04
    17b8:	2a 30       	cpi	r18, 0x0A	; 10
    17ba:	31 05       	cpc	r19, r1
    17bc:	b1 f1       	breq	.+108    	; 0x182a <KEYPAD_4x4_adjustKeyNumber+0x112>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	8b 30       	cpi	r24, 0x0B	; 11
    17c4:	91 05       	cpc	r25, r1
    17c6:	a4 f5       	brge	.+104    	; 0x1830 <KEYPAD_4x4_adjustKeyNumber+0x118>
    17c8:	2d c0       	rjmp	.+90     	; 0x1824 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    17ca:	2b 81       	ldd	r18, Y+3	; 0x03
    17cc:	3c 81       	ldd	r19, Y+4	; 0x04
    17ce:	2e 30       	cpi	r18, 0x0E	; 14
    17d0:	31 05       	cpc	r19, r1
    17d2:	b9 f1       	breq	.+110    	; 0x1842 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	8e 30       	cpi	r24, 0x0E	; 14
    17da:	91 05       	cpc	r25, r1
    17dc:	7c f1       	brlt	.+94     	; 0x183c <KEYPAD_4x4_adjustKeyNumber+0x124>
    17de:	2b 81       	ldd	r18, Y+3	; 0x03
    17e0:	3c 81       	ldd	r19, Y+4	; 0x04
    17e2:	2f 30       	cpi	r18, 0x0F	; 15
    17e4:	31 05       	cpc	r19, r1
    17e6:	79 f1       	breq	.+94     	; 0x1846 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	80 31       	cpi	r24, 0x10	; 16
    17ee:	91 05       	cpc	r25, r1
    17f0:	69 f1       	breq	.+90     	; 0x184c <KEYPAD_4x4_adjustKeyNumber+0x134>
    17f2:	2f c0       	rjmp	.+94     	; 0x1852 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    17f4:	87 e0       	ldi	r24, 0x07	; 7
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	2e c0       	rjmp	.+92     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	2b c0       	rjmp	.+86     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1800:	89 e0       	ldi	r24, 0x09	; 9
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	28 c0       	rjmp	.+80     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1806:	85 e2       	ldi	r24, 0x25	; 37
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	25 c0       	rjmp	.+74     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	22 c0       	rjmp	.+68     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1812:	85 e0       	ldi	r24, 0x05	; 5
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1818:	86 e0       	ldi	r24, 0x06	; 6
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	1c c0       	rjmp	.+56     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    181e:	8a e2       	ldi	r24, 0x2A	; 42
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	19 c0       	rjmp	.+50     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	16 c0       	rjmp	.+44     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	13 c0       	rjmp	.+38     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1836:	8d e2       	ldi	r24, 0x2D	; 45
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	0d c0       	rjmp	.+26     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    183c:	8d e0       	ldi	r24, 0x0D	; 13
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1846:	8d e3       	ldi	r24, 0x3D	; 61
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    184c:	8b e2       	ldi	r24, 0x2B	; 43
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	2e 97       	sbiw	r28, 0x0e	; 14
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 ea       	ldi	r26, 0xA0	; 160
    1894:	b1 e4       	ldi	r27, 0x41	; 65
    1896:	8b 87       	std	Y+11, r24	; 0x0b
    1898:	9c 87       	std	Y+12, r25	; 0x0c
    189a:	ad 87       	std	Y+13, r26	; 0x0d
    189c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a e7       	ldi	r20, 0x7A	; 122
    18ac:	55 e4       	ldi	r21, 0x45	; 69
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8f 83       	std	Y+7, r24	; 0x07
    18b8:	98 87       	std	Y+8, r25	; 0x08
    18ba:	a9 87       	std	Y+9, r26	; 0x09
    18bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_init+0x7a>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_init+0xf8>
	else if (__tmp > 65535)
    18e0:	6f 81       	ldd	r22, Y+7	; 0x07
    18e2:	78 85       	ldd	r23, Y+8	; 0x08
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_init+0xda>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_init+0xc8>
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_init+0xbc>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_init+0x104>
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	63 e0       	ldi	r22, 0x03	; 3
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	66 e0       	ldi	r22, 0x06	; 6
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 61 07 	call	0xec2	; 0xec2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    199a:	83 e3       	ldi	r24, 0x33	; 51
    199c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    19a0:	82 e3       	ldi	r24, 0x32	; 50
    19a2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    19a6:	88 e2       	ldi	r24, 0x28	; 40
    19a8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19ac:	8c e0       	ldi	r24, 0x0C	; 12
    19ae:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
}
    19b8:	2e 96       	adiw	r28, 0x0e	; 14
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	c3 56       	subi	r28, 0x63	; 99
    19d8:	d0 40       	sbci	r29, 0x00	; 0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	fe 01       	movw	r30, r28
    19e6:	ed 59       	subi	r30, 0x9D	; 157
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	61 e0       	ldi	r22, 0x01	; 1
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    19f6:	fe 01       	movw	r30, r28
    19f8:	e1 5a       	subi	r30, 0xA1	; 161
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e8       	ldi	r26, 0x80	; 128
    1a02:	bf e3       	ldi	r27, 0x3F	; 63
    1a04:	80 83       	st	Z, r24
    1a06:	91 83       	std	Z+1, r25	; 0x01
    1a08:	a2 83       	std	Z+2, r26	; 0x02
    1a0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	05 5a       	subi	r16, 0xA5	; 165
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	fe 01       	movw	r30, r28
    1a14:	e1 5a       	subi	r30, 0xA1	; 161
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	55 e4       	ldi	r21, 0x45	; 69
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	f8 01       	movw	r30, r16
    1a32:	80 83       	st	Z, r24
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	a2 83       	std	Z+2, r26	; 0x02
    1a38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e5 5a       	subi	r30, 0xA5	; 165
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	60 81       	ld	r22, Z
    1a42:	71 81       	ldd	r23, Z+1	; 0x01
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	5f e3       	ldi	r21, 0x3F	; 63
    1a50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a54:	88 23       	and	r24, r24
    1a56:	44 f4       	brge	.+16     	; 0x1a68 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e7 5a       	subi	r30, 0xA7	; 167
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	64 c0       	rjmp	.+200    	; 0x1b30 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e5 5a       	subi	r30, 0xA5	; 165
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <LCD_sendCommand+0xbe>
    1a86:	43 c0       	rjmp	.+134    	; 0x1b0e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	fe 01       	movw	r30, r28
    1a8a:	e1 5a       	subi	r30, 0xA1	; 161
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	93 81       	ldd	r25, Z+3	; 0x03
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e2       	ldi	r20, 0x20	; 32
    1a9c:	51 e4       	ldi	r21, 0x41	; 65
    1a9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8e 01       	movw	r16, r28
    1aa8:	07 5a       	subi	r16, 0xA7	; 167
    1aaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	f8 01       	movw	r30, r16
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
    1abe:	1f c0       	rjmp	.+62     	; 0x1afe <LCD_sendCommand+0x134>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e9 5a       	subi	r30, 0xA9	; 169
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	80 e9       	ldi	r24, 0x90	; 144
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e9 5a       	subi	r30, 0xA9	; 169
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_sendCommand+0x10e>
    1adc:	fe 01       	movw	r30, r28
    1ade:	e9 5a       	subi	r30, 0xA9	; 169
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae6:	de 01       	movw	r26, r28
    1ae8:	a7 5a       	subi	r26, 0xA7	; 167
    1aea:	bf 4f       	sbci	r27, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	e7 5a       	subi	r30, 0xA7	; 167
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	11 96       	adiw	r26, 0x01	; 1
    1afa:	9c 93       	st	X, r25
    1afc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	fe 01       	movw	r30, r28
    1b00:	e7 5a       	subi	r30, 0xA7	; 167
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	d1 f6       	brne	.-76     	; 0x1ac0 <LCD_sendCommand+0xf6>
    1b0c:	27 c0       	rjmp	.+78     	; 0x1b5c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	8e 01       	movw	r16, r28
    1b10:	07 5a       	subi	r16, 0xA7	; 167
    1b12:	1f 4f       	sbci	r17, 0xFF	; 255
    1b14:	fe 01       	movw	r30, r28
    1b16:	e5 5a       	subi	r30, 0xA5	; 165
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	91 83       	std	Z+1, r25	; 0x01
    1b2e:	80 83       	st	Z, r24
    1b30:	de 01       	movw	r26, r28
    1b32:	ab 5a       	subi	r26, 0xAB	; 171
    1b34:	bf 4f       	sbci	r27, 0xFF	; 255
    1b36:	fe 01       	movw	r30, r28
    1b38:	e7 5a       	subi	r30, 0xA7	; 167
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	80 81       	ld	r24, Z
    1b3e:	91 81       	ldd	r25, Z+1	; 0x01
    1b40:	8d 93       	st	X+, r24
    1b42:	9c 93       	st	X, r25
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 5a       	subi	r30, 0xAB	; 171
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_sendCommand+0x184>
    1b52:	fe 01       	movw	r30, r28
    1b54:	eb 5a       	subi	r30, 0xAB	; 171
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	62 e0       	ldi	r22, 0x02	; 2
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    1b66:	fe 01       	movw	r30, r28
    1b68:	ef 5a       	subi	r30, 0xAF	; 175
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e8       	ldi	r26, 0x80	; 128
    1b72:	bf e3       	ldi	r27, 0x3F	; 63
    1b74:	80 83       	st	Z, r24
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	a2 83       	std	Z+2, r26	; 0x02
    1b7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	8e 01       	movw	r16, r28
    1b7e:	03 5b       	subi	r16, 0xB3	; 179
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	fe 01       	movw	r30, r28
    1b84:	ef 5a       	subi	r30, 0xAF	; 175
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a e7       	ldi	r20, 0x7A	; 122
    1b96:	55 e4       	ldi	r21, 0x45	; 69
    1b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1baa:	fe 01       	movw	r30, r28
    1bac:	e3 5b       	subi	r30, 0xB3	; 179
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	44 f4       	brge	.+16     	; 0x1bd8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e5 5b       	subi	r30, 0xB5	; 181
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	80 83       	st	Z, r24
    1bd6:	64 c0       	rjmp	.+200    	; 0x1ca0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e3 5b       	subi	r30, 0xB3	; 179
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <LCD_sendCommand+0x22e>
    1bf6:	43 c0       	rjmp	.+134    	; 0x1c7e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	ef 5a       	subi	r30, 0xAF	; 175
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	60 81       	ld	r22, Z
    1c00:	71 81       	ldd	r23, Z+1	; 0x01
    1c02:	82 81       	ldd	r24, Z+2	; 0x02
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8e 01       	movw	r16, r28
    1c18:	05 5b       	subi	r16, 0xB5	; 181
    1c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	f8 01       	movw	r30, r16
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	1f c0       	rjmp	.+62     	; 0x1c6e <LCD_sendCommand+0x2a4>
    1c30:	fe 01       	movw	r30, r28
    1c32:	e7 5b       	subi	r30, 0xB7	; 183
    1c34:	ff 4f       	sbci	r31, 0xFF	; 255
    1c36:	80 e9       	ldi	r24, 0x90	; 144
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e7 5b       	subi	r30, 0xB7	; 183
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_sendCommand+0x27e>
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e7 5b       	subi	r30, 0xB7	; 183
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c56:	de 01       	movw	r26, r28
    1c58:	a5 5b       	subi	r26, 0xB5	; 181
    1c5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e5 5b       	subi	r30, 0xB5	; 181
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	11 96       	adiw	r26, 0x01	; 1
    1c6a:	9c 93       	st	X, r25
    1c6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e5 5b       	subi	r30, 0xB5	; 181
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	80 81       	ld	r24, Z
    1c76:	91 81       	ldd	r25, Z+1	; 0x01
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	d1 f6       	brne	.-76     	; 0x1c30 <LCD_sendCommand+0x266>
    1c7c:	27 c0       	rjmp	.+78     	; 0x1ccc <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7e:	8e 01       	movw	r16, r28
    1c80:	05 5b       	subi	r16, 0xB5	; 181
    1c82:	1f 4f       	sbci	r17, 0xFF	; 255
    1c84:	fe 01       	movw	r30, r28
    1c86:	e3 5b       	subi	r30, 0xB3	; 179
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
    1ca0:	de 01       	movw	r26, r28
    1ca2:	a9 5b       	subi	r26, 0xB9	; 185
    1ca4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	e5 5b       	subi	r30, 0xB5	; 181
    1caa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	8d 93       	st	X+, r24
    1cb2:	9c 93       	st	X, r25
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	e9 5b       	subi	r30, 0xB9	; 185
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 81       	ld	r24, Z
    1cbc:	91 81       	ldd	r25, Z+1	; 0x01
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_sendCommand+0x2f4>
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e9 5b       	subi	r30, 0xB9	; 185
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	91 83       	std	Z+1, r25	; 0x01
    1cca:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1ccc:	fe 01       	movw	r30, r28
    1cce:	ed 59       	subi	r30, 0x9D	; 157
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	80 71       	andi	r24, 0x10	; 16
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	95 95       	asr	r25
    1cde:	87 95       	ror	r24
    1ce0:	95 95       	asr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	95 95       	asr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	95 95       	asr	r25
    1cea:	87 95       	ror	r24
    1cec:	98 2f       	mov	r25, r24
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	63 e0       	ldi	r22, 0x03	; 3
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ed 59       	subi	r30, 0x9D	; 157
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	80 72       	andi	r24, 0x20	; 32
    1d06:	90 70       	andi	r25, 0x00	; 0
    1d08:	95 95       	asr	r25
    1d0a:	87 95       	ror	r24
    1d0c:	95 95       	asr	r25
    1d0e:	87 95       	ror	r24
    1d10:	95 95       	asr	r25
    1d12:	87 95       	ror	r24
    1d14:	95 95       	asr	r25
    1d16:	87 95       	ror	r24
    1d18:	95 95       	asr	r25
    1d1a:	87 95       	ror	r24
    1d1c:	98 2f       	mov	r25, r24
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	64 e0       	ldi	r22, 0x04	; 4
    1d22:	49 2f       	mov	r20, r25
    1d24:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 59       	subi	r30, 0x9D	; 157
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	80 74       	andi	r24, 0x40	; 64
    1d36:	90 70       	andi	r25, 0x00	; 0
    1d38:	08 2e       	mov	r0, r24
    1d3a:	89 2f       	mov	r24, r25
    1d3c:	00 0c       	add	r0, r0
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 0b       	sbc	r25, r25
    1d42:	00 0c       	add	r0, r0
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	98 2f       	mov	r25, r24
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	65 e0       	ldi	r22, 0x05	; 5
    1d4e:	49 2f       	mov	r20, r25
    1d50:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1d54:	fe 01       	movw	r30, r28
    1d56:	ed 59       	subi	r30, 0x9D	; 157
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	98 2f       	mov	r25, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	99 27       	eor	r25, r25
    1d62:	99 1f       	adc	r25, r25
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	66 e0       	ldi	r22, 0x06	; 6
    1d68:	49 2f       	mov	r20, r25
    1d6a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ed 5b       	subi	r30, 0xBD	; 189
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a0 e8       	ldi	r26, 0x80	; 128
    1d7a:	bf e3       	ldi	r27, 0x3F	; 63
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d84:	8e 01       	movw	r16, r28
    1d86:	01 5c       	subi	r16, 0xC1	; 193
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	ed 5b       	subi	r30, 0xBD	; 189
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	55 e4       	ldi	r21, 0x45	; 69
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 83       	st	Z, r24
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	a2 83       	std	Z+2, r26	; 0x02
    1db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db2:	fe 01       	movw	r30, r28
    1db4:	ff 96       	adiw	r30, 0x3f	; 63
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e af       	std	Y+62, r25	; 0x3e
    1dd4:	8d af       	std	Y+61, r24	; 0x3d
    1dd6:	46 c0       	rjmp	.+140    	; 0x1e64 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ff 96       	adiw	r30, 0x3f	; 63
    1ddc:	60 81       	ld	r22, Z
    1dde:	71 81       	ldd	r23, Z+1	; 0x01
    1de0:	82 81       	ldd	r24, Z+2	; 0x02
    1de2:	93 81       	ldd	r25, Z+3	; 0x03
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	64 f5       	brge	.+88     	; 0x1e4c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	fe 01       	movw	r30, r28
    1df6:	ed 5b       	subi	r30, 0xBD	; 189
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	82 81       	ldd	r24, Z+2	; 0x02
    1e00:	93 81       	ldd	r25, Z+3	; 0x03
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e af       	std	Y+62, r25	; 0x3e
    1e20:	8d af       	std	Y+61, r24	; 0x3d
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_sendCommand+0x478>
    1e24:	80 e9       	ldi	r24, 0x90	; 144
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	9c af       	std	Y+60, r25	; 0x3c
    1e2a:	8b af       	std	Y+59, r24	; 0x3b
    1e2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e2e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_sendCommand+0x466>
    1e34:	9c af       	std	Y+60, r25	; 0x3c
    1e36:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e af       	std	Y+62, r25	; 0x3e
    1e40:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <LCD_sendCommand+0x45a>
    1e4a:	16 c0       	rjmp	.+44     	; 0x1e78 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ff 96       	adiw	r30, 0x3f	; 63
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e af       	std	Y+62, r25	; 0x3e
    1e62:	8d af       	std	Y+61, r24	; 0x3d
    1e64:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e66:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e68:	9a af       	std	Y+58, r25	; 0x3a
    1e6a:	89 af       	std	Y+57, r24	; 0x39
    1e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendCommand+0x4a6>
    1e74:	9a af       	std	Y+58, r25	; 0x3a
    1e76:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	62 e0       	ldi	r22, 0x02	; 2
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a0 e8       	ldi	r26, 0x80	; 128
    1e88:	bf e3       	ldi	r27, 0x3F	; 63
    1e8a:	8d ab       	std	Y+53, r24	; 0x35
    1e8c:	9e ab       	std	Y+54, r25	; 0x36
    1e8e:	af ab       	std	Y+55, r26	; 0x37
    1e90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e92:	6d a9       	ldd	r22, Y+53	; 0x35
    1e94:	7e a9       	ldd	r23, Y+54	; 0x36
    1e96:	8f a9       	ldd	r24, Y+55	; 0x37
    1e98:	98 ad       	ldd	r25, Y+56	; 0x38
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ea0:	55 e4       	ldi	r21, 0x45	; 69
    1ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	89 ab       	std	Y+49, r24	; 0x31
    1eac:	9a ab       	std	Y+50, r25	; 0x32
    1eae:	ab ab       	std	Y+51, r26	; 0x33
    1eb0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	5f e3       	ldi	r21, 0x3F	; 63
    1ec2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec6:	88 23       	and	r24, r24
    1ec8:	2c f4       	brge	.+10     	; 0x1ed4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	98 ab       	std	Y+48, r25	; 0x30
    1ed0:	8f a7       	std	Y+47, r24	; 0x2f
    1ed2:	3f c0       	rjmp	.+126    	; 0x1f52 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eda:	9c a9       	ldd	r25, Y+52	; 0x34
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	3f ef       	ldi	r19, 0xFF	; 255
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	4c f5       	brge	.+82     	; 0x1f3e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eec:	6d a9       	ldd	r22, Y+53	; 0x35
    1eee:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ef2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e2       	ldi	r20, 0x20	; 32
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <LCD_sendCommand+0x56a>
    1f16:	80 e9       	ldi	r24, 0x90	; 144
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	9e a7       	std	Y+46, r25	; 0x2e
    1f1c:	8d a7       	std	Y+45, r24	; 0x2d
    1f1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f20:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_sendCommand+0x558>
    1f26:	9e a7       	std	Y+46, r25	; 0x2e
    1f28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	98 ab       	std	Y+48, r25	; 0x30
    1f32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f36:	98 a9       	ldd	r25, Y+48	; 0x30
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	69 f7       	brne	.-38     	; 0x1f16 <LCD_sendCommand+0x54c>
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f40:	7a a9       	ldd	r23, Y+50	; 0x32
    1f42:	8b a9       	ldd	r24, Y+51	; 0x33
    1f44:	9c a9       	ldd	r25, Y+52	; 0x34
    1f46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	98 ab       	std	Y+48, r25	; 0x30
    1f50:	8f a7       	std	Y+47, r24	; 0x2f
    1f52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f54:	98 a9       	ldd	r25, Y+48	; 0x30
    1f56:	9c a7       	std	Y+44, r25	; 0x2c
    1f58:	8b a7       	std	Y+43, r24	; 0x2b
    1f5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <LCD_sendCommand+0x594>
    1f62:	9c a7       	std	Y+44, r25	; 0x2c
    1f64:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	62 e0       	ldi	r22, 0x02	; 2
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a0 e8       	ldi	r26, 0x80	; 128
    1f76:	bf e3       	ldi	r27, 0x3F	; 63
    1f78:	8f a3       	std	Y+39, r24	; 0x27
    1f7a:	98 a7       	std	Y+40, r25	; 0x28
    1f7c:	a9 a7       	std	Y+41, r26	; 0x29
    1f7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f80:	6f a1       	ldd	r22, Y+39	; 0x27
    1f82:	78 a5       	ldd	r23, Y+40	; 0x28
    1f84:	89 a5       	ldd	r24, Y+41	; 0x29
    1f86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	55 e4       	ldi	r21, 0x45	; 69
    1f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8b a3       	std	Y+35, r24	; 0x23
    1f9a:	9c a3       	std	Y+36, r25	; 0x24
    1f9c:	ad a3       	std	Y+37, r26	; 0x25
    1f9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	40 e8       	ldi	r20, 0x80	; 128
    1fae:	5f e3       	ldi	r21, 0x3F	; 63
    1fb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb4:	88 23       	and	r24, r24
    1fb6:	2c f4       	brge	.+10     	; 0x1fc2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9a a3       	std	Y+34, r25	; 0x22
    1fbe:	89 a3       	std	Y+33, r24	; 0x21
    1fc0:	3f c0       	rjmp	.+126    	; 0x2040 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1fc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	3f ef       	ldi	r19, 0xFF	; 255
    1fce:	4f e7       	ldi	r20, 0x7F	; 127
    1fd0:	57 e4       	ldi	r21, 0x47	; 71
    1fd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	4c f5       	brge	.+82     	; 0x202c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fda:	6f a1       	ldd	r22, Y+39	; 0x27
    1fdc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fde:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e2       	ldi	r20, 0x20	; 32
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	0f c0       	rjmp	.+30     	; 0x2022 <LCD_sendCommand+0x658>
    2004:	80 e9       	ldi	r24, 0x90	; 144
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	98 a3       	std	Y+32, r25	; 0x20
    200a:	8f 8f       	std	Y+31, r24	; 0x1f
    200c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200e:	98 a1       	ldd	r25, Y+32	; 0x20
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	f1 f7       	brne	.-4      	; 0x2010 <LCD_sendCommand+0x646>
    2014:	98 a3       	std	Y+32, r25	; 0x20
    2016:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	89 a1       	ldd	r24, Y+33	; 0x21
    201a:	9a a1       	ldd	r25, Y+34	; 0x22
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	9a a3       	std	Y+34, r25	; 0x22
    2020:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2022:	89 a1       	ldd	r24, Y+33	; 0x21
    2024:	9a a1       	ldd	r25, Y+34	; 0x22
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	69 f7       	brne	.-38     	; 0x2004 <LCD_sendCommand+0x63a>
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202c:	6b a1       	ldd	r22, Y+35	; 0x23
    202e:	7c a1       	ldd	r23, Y+36	; 0x24
    2030:	8d a1       	ldd	r24, Y+37	; 0x25
    2032:	9e a1       	ldd	r25, Y+38	; 0x26
    2034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	89 a1       	ldd	r24, Y+33	; 0x21
    2042:	9a a1       	ldd	r25, Y+34	; 0x22
    2044:	9e 8f       	std	Y+30, r25	; 0x1e
    2046:	8d 8f       	std	Y+29, r24	; 0x1d
    2048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0x682>
    2050:	9e 8f       	std	Y+30, r25	; 0x1e
    2052:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2054:	fe 01       	movw	r30, r28
    2056:	ed 59       	subi	r30, 0x9D	; 157
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	98 2f       	mov	r25, r24
    205e:	91 70       	andi	r25, 0x01	; 1
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	63 e0       	ldi	r22, 0x03	; 3
    2064:	49 2f       	mov	r20, r25
    2066:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    206a:	fe 01       	movw	r30, r28
    206c:	ed 59       	subi	r30, 0x9D	; 157
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	82 70       	andi	r24, 0x02	; 2
    2078:	90 70       	andi	r25, 0x00	; 0
    207a:	95 95       	asr	r25
    207c:	87 95       	ror	r24
    207e:	98 2f       	mov	r25, r24
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	64 e0       	ldi	r22, 0x04	; 4
    2084:	49 2f       	mov	r20, r25
    2086:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    208a:	fe 01       	movw	r30, r28
    208c:	ed 59       	subi	r30, 0x9D	; 157
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	84 70       	andi	r24, 0x04	; 4
    2098:	90 70       	andi	r25, 0x00	; 0
    209a:	95 95       	asr	r25
    209c:	87 95       	ror	r24
    209e:	95 95       	asr	r25
    20a0:	87 95       	ror	r24
    20a2:	98 2f       	mov	r25, r24
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	65 e0       	ldi	r22, 0x05	; 5
    20a8:	49 2f       	mov	r20, r25
    20aa:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    20ae:	fe 01       	movw	r30, r28
    20b0:	ed 59       	subi	r30, 0x9D	; 157
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	88 70       	andi	r24, 0x08	; 8
    20bc:	90 70       	andi	r25, 0x00	; 0
    20be:	95 95       	asr	r25
    20c0:	87 95       	ror	r24
    20c2:	95 95       	asr	r25
    20c4:	87 95       	ror	r24
    20c6:	95 95       	asr	r25
    20c8:	87 95       	ror	r24
    20ca:	98 2f       	mov	r25, r24
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	66 e0       	ldi	r22, 0x06	; 6
    20d0:	49 2f       	mov	r20, r25
    20d2:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e8       	ldi	r26, 0x80	; 128
    20dc:	bf e3       	ldi	r27, 0x3F	; 63
    20de:	89 8f       	std	Y+25, r24	; 0x19
    20e0:	9a 8f       	std	Y+26, r25	; 0x1a
    20e2:	ab 8f       	std	Y+27, r26	; 0x1b
    20e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	69 8d       	ldd	r22, Y+25	; 0x19
    20e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4a e7       	ldi	r20, 0x7A	; 122
    20f4:	55 e4       	ldi	r21, 0x45	; 69
    20f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8d 8b       	std	Y+21, r24	; 0x15
    2100:	9e 8b       	std	Y+22, r25	; 0x16
    2102:	af 8b       	std	Y+23, r26	; 0x17
    2104:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_sendCommand+0x75e>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	69 8d       	ldd	r22, Y+25	; 0x19
    2142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_sendCommand+0x7be>
    216a:	80 e9       	ldi	r24, 0x90	; 144
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	9a 8b       	std	Y+18, r25	; 0x12
    2170:	89 8b       	std	Y+17, r24	; 0x11
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	9a 89       	ldd	r25, Y+18	; 0x12
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x7ac>
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8b 89       	ldd	r24, Y+19	; 0x13
    218a:	9c 89       	ldd	r25, Y+20	; 0x14
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_sendCommand+0x7a0>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6d 89       	ldd	r22, Y+21	; 0x15
    2194:	7e 89       	ldd	r23, Y+22	; 0x16
    2196:	8f 89       	ldd	r24, Y+23	; 0x17
    2198:	98 8d       	ldd	r25, Y+24	; 0x18
    219a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	98 8b       	std	Y+16, r25	; 0x10
    21ac:	8f 87       	std	Y+15, r24	; 0x0f
    21ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b0:	98 89       	ldd	r25, Y+16	; 0x10
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_sendCommand+0x7e8>
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e8       	ldi	r26, 0x80	; 128
    21ca:	bf e3       	ldi	r27, 0x3F	; 63
    21cc:	8b 87       	std	Y+11, r24	; 0x0b
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	ad 87       	std	Y+13, r26	; 0x0d
    21d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a e7       	ldi	r20, 0x7A	; 122
    21e2:	55 e4       	ldi	r21, 0x45	; 69
    21e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8f 83       	std	Y+7, r24	; 0x07
    21ee:	98 87       	std	Y+8, r25	; 0x08
    21f0:	a9 87       	std	Y+9, r26	; 0x09
    21f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <LCD_sendCommand+0x84c>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <LCD_sendCommand+0x8ac>
    2258:	80 e9       	ldi	r24, 0x90	; 144
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_sendCommand+0x89a>
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <LCD_sendCommand+0x88e>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_sendCommand+0x8d6>
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    22a8:	cd 59       	subi	r28, 0x9D	; 157
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	08 95       	ret

000022c0 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	c3 56       	subi	r28, 0x63	; 99
    22ce:	d0 40       	sbci	r29, 0x00	; 0
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 59       	subi	r30, 0x9D	; 157
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	61 e0       	ldi	r22, 0x01	; 1
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    22ec:	fe 01       	movw	r30, r28
    22ee:	e1 5a       	subi	r30, 0xA1	; 161
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e8       	ldi	r26, 0x80	; 128
    22f8:	bf e3       	ldi	r27, 0x3F	; 63
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	05 5a       	subi	r16, 0xA5	; 165
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	e1 5a       	subi	r30, 0xA1	; 161
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a e7       	ldi	r20, 0x7A	; 122
    231c:	55 e4       	ldi	r21, 0x45	; 69
    231e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	e5 5a       	subi	r30, 0xA5	; 165
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	44 f4       	brge	.+16     	; 0x235e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    234e:	fe 01       	movw	r30, r28
    2350:	e7 5a       	subi	r30, 0xA7	; 167
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	64 c0       	rjmp	.+200    	; 0x2426 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    235e:	fe 01       	movw	r30, r28
    2360:	e5 5a       	subi	r30, 0xA5	; 165
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <LCD_displayCharacter+0xbe>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	fe 01       	movw	r30, r28
    2380:	e1 5a       	subi	r30, 0xA1	; 161
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 01       	movw	r16, r28
    239e:	07 5a       	subi	r16, 0xA7	; 167
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	1f c0       	rjmp	.+62     	; 0x23f4 <LCD_displayCharacter+0x134>
    23b6:	fe 01       	movw	r30, r28
    23b8:	e9 5a       	subi	r30, 0xA9	; 169
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 e9       	ldi	r24, 0x90	; 144
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5a       	subi	r30, 0xA9	; 169
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_displayCharacter+0x10e>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e9 5a       	subi	r30, 0xA9	; 169
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	de 01       	movw	r26, r28
    23de:	a7 5a       	subi	r26, 0xA7	; 167
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	e7 5a       	subi	r30, 0xA7	; 167
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5a       	subi	r30, 0xA7	; 167
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	d1 f6       	brne	.-76     	; 0x23b6 <LCD_displayCharacter+0xf6>
    2402:	27 c0       	rjmp	.+78     	; 0x2452 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	8e 01       	movw	r16, r28
    2406:	07 5a       	subi	r16, 0xA7	; 167
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e5 5a       	subi	r30, 0xA5	; 165
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	de 01       	movw	r26, r28
    2428:	ab 5a       	subi	r26, 0xAB	; 171
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e7 5a       	subi	r30, 0xA7	; 167
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	8d 93       	st	X+, r24
    2438:	9c 93       	st	X, r25
    243a:	fe 01       	movw	r30, r28
    243c:	eb 5a       	subi	r30, 0xAB	; 171
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_displayCharacter+0x184>
    2448:	fe 01       	movw	r30, r28
    244a:	eb 5a       	subi	r30, 0xAB	; 171
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    245c:	fe 01       	movw	r30, r28
    245e:	ef 5a       	subi	r30, 0xAF	; 175
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e8       	ldi	r26, 0x80	; 128
    2468:	bf e3       	ldi	r27, 0x3F	; 63
    246a:	80 83       	st	Z, r24
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	a2 83       	std	Z+2, r26	; 0x02
    2470:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	8e 01       	movw	r16, r28
    2474:	03 5b       	subi	r16, 0xB3	; 179
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	ef 5a       	subi	r30, 0xAF	; 175
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a e7       	ldi	r20, 0x7A	; 122
    248c:	55 e4       	ldi	r21, 0x45	; 69
    248e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	f8 01       	movw	r30, r16
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a0:	fe 01       	movw	r30, r28
    24a2:	e3 5b       	subi	r30, 0xB3	; 179
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	44 f4       	brge	.+16     	; 0x24ce <LCD_displayCharacter+0x20e>
		__ticks = 1;
    24be:	fe 01       	movw	r30, r28
    24c0:	e5 5b       	subi	r30, 0xB5	; 181
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
    24cc:	64 c0       	rjmp	.+200    	; 0x2596 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e3 5b       	subi	r30, 0xB3	; 179
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	0c f0       	brlt	.+2      	; 0x24ee <LCD_displayCharacter+0x22e>
    24ec:	43 c0       	rjmp	.+134    	; 0x2574 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 5a       	subi	r30, 0xAF	; 175
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8e 01       	movw	r16, r28
    250e:	05 5b       	subi	r16, 0xB5	; 181
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	1f c0       	rjmp	.+62     	; 0x2564 <LCD_displayCharacter+0x2a4>
    2526:	fe 01       	movw	r30, r28
    2528:	e7 5b       	subi	r30, 0xB7	; 183
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 e9       	ldi	r24, 0x90	; 144
    252e:	91 e0       	ldi	r25, 0x01	; 1
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5b       	subi	r30, 0xB7	; 183
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_displayCharacter+0x27e>
    2542:	fe 01       	movw	r30, r28
    2544:	e7 5b       	subi	r30, 0xB7	; 183
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	de 01       	movw	r26, r28
    254e:	a5 5b       	subi	r26, 0xB5	; 181
    2550:	bf 4f       	sbci	r27, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e5 5b       	subi	r30, 0xB5	; 181
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	11 96       	adiw	r26, 0x01	; 1
    2560:	9c 93       	st	X, r25
    2562:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2564:	fe 01       	movw	r30, r28
    2566:	e5 5b       	subi	r30, 0xB5	; 181
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	d1 f6       	brne	.-76     	; 0x2526 <LCD_displayCharacter+0x266>
    2572:	27 c0       	rjmp	.+78     	; 0x25c2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	8e 01       	movw	r16, r28
    2576:	05 5b       	subi	r16, 0xB5	; 181
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e3 5b       	subi	r30, 0xB3	; 179
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	f8 01       	movw	r30, r16
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    2596:	de 01       	movw	r26, r28
    2598:	a9 5b       	subi	r26, 0xB9	; 185
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	fe 01       	movw	r30, r28
    259e:	e5 5b       	subi	r30, 0xB5	; 181
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	8d 93       	st	X+, r24
    25a8:	9c 93       	st	X, r25
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 5b       	subi	r30, 0xB9	; 185
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <LCD_displayCharacter+0x2f4>
    25b8:	fe 01       	movw	r30, r28
    25ba:	e9 5b       	subi	r30, 0xB9	; 185
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    25c2:	fe 01       	movw	r30, r28
    25c4:	ed 59       	subi	r30, 0x9D	; 157
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 81       	ld	r24, Z
    25ca:	88 2f       	mov	r24, r24
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	80 71       	andi	r24, 0x10	; 16
    25d0:	90 70       	andi	r25, 0x00	; 0
    25d2:	95 95       	asr	r25
    25d4:	87 95       	ror	r24
    25d6:	95 95       	asr	r25
    25d8:	87 95       	ror	r24
    25da:	95 95       	asr	r25
    25dc:	87 95       	ror	r24
    25de:	95 95       	asr	r25
    25e0:	87 95       	ror	r24
    25e2:	98 2f       	mov	r25, r24
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	63 e0       	ldi	r22, 0x03	; 3
    25e8:	49 2f       	mov	r20, r25
    25ea:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 59       	subi	r30, 0x9D	; 157
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	80 72       	andi	r24, 0x20	; 32
    25fc:	90 70       	andi	r25, 0x00	; 0
    25fe:	95 95       	asr	r25
    2600:	87 95       	ror	r24
    2602:	95 95       	asr	r25
    2604:	87 95       	ror	r24
    2606:	95 95       	asr	r25
    2608:	87 95       	ror	r24
    260a:	95 95       	asr	r25
    260c:	87 95       	ror	r24
    260e:	95 95       	asr	r25
    2610:	87 95       	ror	r24
    2612:	98 2f       	mov	r25, r24
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	64 e0       	ldi	r22, 0x04	; 4
    2618:	49 2f       	mov	r20, r25
    261a:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    261e:	fe 01       	movw	r30, r28
    2620:	ed 59       	subi	r30, 0x9D	; 157
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	80 81       	ld	r24, Z
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	80 74       	andi	r24, 0x40	; 64
    262c:	90 70       	andi	r25, 0x00	; 0
    262e:	08 2e       	mov	r0, r24
    2630:	89 2f       	mov	r24, r25
    2632:	00 0c       	add	r0, r0
    2634:	88 1f       	adc	r24, r24
    2636:	99 0b       	sbc	r25, r25
    2638:	00 0c       	add	r0, r0
    263a:	88 1f       	adc	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	98 2f       	mov	r25, r24
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	65 e0       	ldi	r22, 0x05	; 5
    2644:	49 2f       	mov	r20, r25
    2646:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	98 2f       	mov	r25, r24
    2654:	99 1f       	adc	r25, r25
    2656:	99 27       	eor	r25, r25
    2658:	99 1f       	adc	r25, r25
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	66 e0       	ldi	r22, 0x06	; 6
    265e:	49 2f       	mov	r20, r25
    2660:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    2664:	fe 01       	movw	r30, r28
    2666:	ed 5b       	subi	r30, 0xBD	; 189
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	8e 01       	movw	r16, r28
    267c:	01 5c       	subi	r16, 0xC1	; 193
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	ed 5b       	subi	r30, 0xBD	; 189
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a e7       	ldi	r20, 0x7A	; 122
    2694:	55 e4       	ldi	r21, 0x45	; 69
    2696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a8:	fe 01       	movw	r30, r28
    26aa:	ff 96       	adiw	r30, 0x3f	; 63
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <LCD_displayCharacter+0x40e>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9e af       	std	Y+62, r25	; 0x3e
    26ca:	8d af       	std	Y+61, r24	; 0x3d
    26cc:	46 c0       	rjmp	.+140    	; 0x275a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    26ce:	fe 01       	movw	r30, r28
    26d0:	ff 96       	adiw	r30, 0x3f	; 63
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	3f ef       	ldi	r19, 0xFF	; 255
    26de:	4f e7       	ldi	r20, 0x7F	; 127
    26e0:	57 e4       	ldi	r21, 0x47	; 71
    26e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26e6:	18 16       	cp	r1, r24
    26e8:	64 f5       	brge	.+88     	; 0x2742 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ea:	fe 01       	movw	r30, r28
    26ec:	ed 5b       	subi	r30, 0xBD	; 189
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e2       	ldi	r20, 0x20	; 32
    26fe:	51 e4       	ldi	r21, 0x41	; 65
    2700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	9e af       	std	Y+62, r25	; 0x3e
    2716:	8d af       	std	Y+61, r24	; 0x3d
    2718:	0f c0       	rjmp	.+30     	; 0x2738 <LCD_displayCharacter+0x478>
    271a:	80 e9       	ldi	r24, 0x90	; 144
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	9c af       	std	Y+60, r25	; 0x3c
    2720:	8b af       	std	Y+59, r24	; 0x3b
    2722:	8b ad       	ldd	r24, Y+59	; 0x3b
    2724:	9c ad       	ldd	r25, Y+60	; 0x3c
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_displayCharacter+0x466>
    272a:	9c af       	std	Y+60, r25	; 0x3c
    272c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2730:	9e ad       	ldd	r25, Y+62	; 0x3e
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	9e af       	std	Y+62, r25	; 0x3e
    2736:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2738:	8d ad       	ldd	r24, Y+61	; 0x3d
    273a:	9e ad       	ldd	r25, Y+62	; 0x3e
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	69 f7       	brne	.-38     	; 0x271a <LCD_displayCharacter+0x45a>
    2740:	16 c0       	rjmp	.+44     	; 0x276e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2742:	fe 01       	movw	r30, r28
    2744:	ff 96       	adiw	r30, 0x3f	; 63
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e af       	std	Y+62, r25	; 0x3e
    2758:	8d af       	std	Y+61, r24	; 0x3d
    275a:	8d ad       	ldd	r24, Y+61	; 0x3d
    275c:	9e ad       	ldd	r25, Y+62	; 0x3e
    275e:	9a af       	std	Y+58, r25	; 0x3a
    2760:	89 af       	std	Y+57, r24	; 0x39
    2762:	89 ad       	ldd	r24, Y+57	; 0x39
    2764:	9a ad       	ldd	r25, Y+58	; 0x3a
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_displayCharacter+0x4a6>
    276a:	9a af       	std	Y+58, r25	; 0x3a
    276c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	62 e0       	ldi	r22, 0x02	; 2
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e8       	ldi	r26, 0x80	; 128
    277e:	bf e3       	ldi	r27, 0x3F	; 63
    2780:	8d ab       	std	Y+53, r24	; 0x35
    2782:	9e ab       	std	Y+54, r25	; 0x36
    2784:	af ab       	std	Y+55, r26	; 0x37
    2786:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	6d a9       	ldd	r22, Y+53	; 0x35
    278a:	7e a9       	ldd	r23, Y+54	; 0x36
    278c:	8f a9       	ldd	r24, Y+55	; 0x37
    278e:	98 ad       	ldd	r25, Y+56	; 0x38
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a e7       	ldi	r20, 0x7A	; 122
    2796:	55 e4       	ldi	r21, 0x45	; 69
    2798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	89 ab       	std	Y+49, r24	; 0x31
    27a2:	9a ab       	std	Y+50, r25	; 0x32
    27a4:	ab ab       	std	Y+51, r26	; 0x33
    27a6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27a8:	69 a9       	ldd	r22, Y+49	; 0x31
    27aa:	7a a9       	ldd	r23, Y+50	; 0x32
    27ac:	8b a9       	ldd	r24, Y+51	; 0x33
    27ae:	9c a9       	ldd	r25, Y+52	; 0x34
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <LCD_displayCharacter+0x50a>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	98 ab       	std	Y+48, r25	; 0x30
    27c6:	8f a7       	std	Y+47, r24	; 0x2f
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    27ca:	69 a9       	ldd	r22, Y+49	; 0x31
    27cc:	7a a9       	ldd	r23, Y+50	; 0x32
    27ce:	8b a9       	ldd	r24, Y+51	; 0x33
    27d0:	9c a9       	ldd	r25, Y+52	; 0x34
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	6d a9       	ldd	r22, Y+53	; 0x35
    27e4:	7e a9       	ldd	r23, Y+54	; 0x36
    27e6:	8f a9       	ldd	r24, Y+55	; 0x37
    27e8:	98 ad       	ldd	r25, Y+56	; 0x38
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
    280a:	0f c0       	rjmp	.+30     	; 0x282a <LCD_displayCharacter+0x56a>
    280c:	80 e9       	ldi	r24, 0x90	; 144
    280e:	91 e0       	ldi	r25, 0x01	; 1
    2810:	9e a7       	std	Y+46, r25	; 0x2e
    2812:	8d a7       	std	Y+45, r24	; 0x2d
    2814:	8d a5       	ldd	r24, Y+45	; 0x2d
    2816:	9e a5       	ldd	r25, Y+46	; 0x2e
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_displayCharacter+0x558>
    281c:	9e a7       	std	Y+46, r25	; 0x2e
    281e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	8f a5       	ldd	r24, Y+47	; 0x2f
    2822:	98 a9       	ldd	r25, Y+48	; 0x30
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	98 ab       	std	Y+48, r25	; 0x30
    2828:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	8f a5       	ldd	r24, Y+47	; 0x2f
    282c:	98 a9       	ldd	r25, Y+48	; 0x30
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <LCD_displayCharacter+0x54c>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	69 a9       	ldd	r22, Y+49	; 0x31
    2836:	7a a9       	ldd	r23, Y+50	; 0x32
    2838:	8b a9       	ldd	r24, Y+51	; 0x33
    283a:	9c a9       	ldd	r25, Y+52	; 0x34
    283c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	98 ab       	std	Y+48, r25	; 0x30
    2846:	8f a7       	std	Y+47, r24	; 0x2f
    2848:	8f a5       	ldd	r24, Y+47	; 0x2f
    284a:	98 a9       	ldd	r25, Y+48	; 0x30
    284c:	9c a7       	std	Y+44, r25	; 0x2c
    284e:	8b a7       	std	Y+43, r24	; 0x2b
    2850:	8b a5       	ldd	r24, Y+43	; 0x2b
    2852:	9c a5       	ldd	r25, Y+44	; 0x2c
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <LCD_displayCharacter+0x594>
    2858:	9c a7       	std	Y+44, r25	; 0x2c
    285a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	62 e0       	ldi	r22, 0x02	; 2
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e8       	ldi	r26, 0x80	; 128
    286c:	bf e3       	ldi	r27, 0x3F	; 63
    286e:	8f a3       	std	Y+39, r24	; 0x27
    2870:	98 a7       	std	Y+40, r25	; 0x28
    2872:	a9 a7       	std	Y+41, r26	; 0x29
    2874:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2876:	6f a1       	ldd	r22, Y+39	; 0x27
    2878:	78 a5       	ldd	r23, Y+40	; 0x28
    287a:	89 a5       	ldd	r24, Y+41	; 0x29
    287c:	9a a5       	ldd	r25, Y+42	; 0x2a
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	4a e7       	ldi	r20, 0x7A	; 122
    2884:	55 e4       	ldi	r21, 0x45	; 69
    2886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	8b a3       	std	Y+35, r24	; 0x23
    2890:	9c a3       	std	Y+36, r25	; 0x24
    2892:	ad a3       	std	Y+37, r26	; 0x25
    2894:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2896:	6b a1       	ldd	r22, Y+35	; 0x23
    2898:	7c a1       	ldd	r23, Y+36	; 0x24
    289a:	8d a1       	ldd	r24, Y+37	; 0x25
    289c:	9e a1       	ldd	r25, Y+38	; 0x26
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e8       	ldi	r20, 0x80	; 128
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28aa:	88 23       	and	r24, r24
    28ac:	2c f4       	brge	.+10     	; 0x28b8 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9a a3       	std	Y+34, r25	; 0x22
    28b4:	89 a3       	std	Y+33, r24	; 0x21
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    28b8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ba:	7c a1       	ldd	r23, Y+36	; 0x24
    28bc:	8d a1       	ldd	r24, Y+37	; 0x25
    28be:	9e a1       	ldd	r25, Y+38	; 0x26
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	3f ef       	ldi	r19, 0xFF	; 255
    28c4:	4f e7       	ldi	r20, 0x7F	; 127
    28c6:	57 e4       	ldi	r21, 0x47	; 71
    28c8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28cc:	18 16       	cp	r1, r24
    28ce:	4c f5       	brge	.+82     	; 0x2922 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d0:	6f a1       	ldd	r22, Y+39	; 0x27
    28d2:	78 a5       	ldd	r23, Y+40	; 0x28
    28d4:	89 a5       	ldd	r24, Y+41	; 0x29
    28d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	40 e2       	ldi	r20, 0x20	; 32
    28de:	51 e4       	ldi	r21, 0x41	; 65
    28e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9a a3       	std	Y+34, r25	; 0x22
    28f6:	89 a3       	std	Y+33, r24	; 0x21
    28f8:	0f c0       	rjmp	.+30     	; 0x2918 <LCD_displayCharacter+0x658>
    28fa:	80 e9       	ldi	r24, 0x90	; 144
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	98 a3       	std	Y+32, r25	; 0x20
    2900:	8f 8f       	std	Y+31, r24	; 0x1f
    2902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2904:	98 a1       	ldd	r25, Y+32	; 0x20
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <LCD_displayCharacter+0x646>
    290a:	98 a3       	std	Y+32, r25	; 0x20
    290c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290e:	89 a1       	ldd	r24, Y+33	; 0x21
    2910:	9a a1       	ldd	r25, Y+34	; 0x22
    2912:	01 97       	sbiw	r24, 0x01	; 1
    2914:	9a a3       	std	Y+34, r25	; 0x22
    2916:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	89 a1       	ldd	r24, Y+33	; 0x21
    291a:	9a a1       	ldd	r25, Y+34	; 0x22
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	69 f7       	brne	.-38     	; 0x28fa <LCD_displayCharacter+0x63a>
    2920:	14 c0       	rjmp	.+40     	; 0x294a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
    2936:	89 a1       	ldd	r24, Y+33	; 0x21
    2938:	9a a1       	ldd	r25, Y+34	; 0x22
    293a:	9e 8f       	std	Y+30, r25	; 0x1e
    293c:	8d 8f       	std	Y+29, r24	; 0x1d
    293e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2940:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <LCD_displayCharacter+0x682>
    2946:	9e 8f       	std	Y+30, r25	; 0x1e
    2948:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    294a:	fe 01       	movw	r30, r28
    294c:	ed 59       	subi	r30, 0x9D	; 157
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	98 2f       	mov	r25, r24
    2954:	91 70       	andi	r25, 0x01	; 1
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	63 e0       	ldi	r22, 0x03	; 3
    295a:	49 2f       	mov	r20, r25
    295c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2960:	fe 01       	movw	r30, r28
    2962:	ed 59       	subi	r30, 0x9D	; 157
    2964:	ff 4f       	sbci	r31, 0xFF	; 255
    2966:	80 81       	ld	r24, Z
    2968:	88 2f       	mov	r24, r24
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	82 70       	andi	r24, 0x02	; 2
    296e:	90 70       	andi	r25, 0x00	; 0
    2970:	95 95       	asr	r25
    2972:	87 95       	ror	r24
    2974:	98 2f       	mov	r25, r24
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	64 e0       	ldi	r22, 0x04	; 4
    297a:	49 2f       	mov	r20, r25
    297c:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2980:	fe 01       	movw	r30, r28
    2982:	ed 59       	subi	r30, 0x9D	; 157
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	84 70       	andi	r24, 0x04	; 4
    298e:	90 70       	andi	r25, 0x00	; 0
    2990:	95 95       	asr	r25
    2992:	87 95       	ror	r24
    2994:	95 95       	asr	r25
    2996:	87 95       	ror	r24
    2998:	98 2f       	mov	r25, r24
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	65 e0       	ldi	r22, 0x05	; 5
    299e:	49 2f       	mov	r20, r25
    29a0:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    29a4:	fe 01       	movw	r30, r28
    29a6:	ed 59       	subi	r30, 0x9D	; 157
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	88 70       	andi	r24, 0x08	; 8
    29b2:	90 70       	andi	r25, 0x00	; 0
    29b4:	95 95       	asr	r25
    29b6:	87 95       	ror	r24
    29b8:	95 95       	asr	r25
    29ba:	87 95       	ror	r24
    29bc:	95 95       	asr	r25
    29be:	87 95       	ror	r24
    29c0:	98 2f       	mov	r25, r24
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	66 e0       	ldi	r22, 0x06	; 6
    29c6:	49 2f       	mov	r20, r25
    29c8:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	a0 e8       	ldi	r26, 0x80	; 128
    29d2:	bf e3       	ldi	r27, 0x3F	; 63
    29d4:	89 8f       	std	Y+25, r24	; 0x19
    29d6:	9a 8f       	std	Y+26, r25	; 0x1a
    29d8:	ab 8f       	std	Y+27, r26	; 0x1b
    29da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	69 8d       	ldd	r22, Y+25	; 0x19
    29de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a e7       	ldi	r20, 0x7A	; 122
    29ea:	55 e4       	ldi	r21, 0x45	; 69
    29ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	8d 8b       	std	Y+21, r24	; 0x15
    29f6:	9e 8b       	std	Y+22, r25	; 0x16
    29f8:	af 8b       	std	Y+23, r26	; 0x17
    29fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29fc:	6d 89       	ldd	r22, Y+21	; 0x15
    29fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2a00:	8f 89       	ldd	r24, Y+23	; 0x17
    2a02:	98 8d       	ldd	r25, Y+24	; 0x18
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	69 8d       	ldd	r22, Y+25	; 0x19
    2a38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <LCD_displayCharacter+0x7be>
    2a60:	80 e9       	ldi	r24, 0x90	; 144
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	9a 8b       	std	Y+18, r25	; 0x12
    2a66:	89 8b       	std	Y+17, r24	; 0x11
    2a68:	89 89       	ldd	r24, Y+17	; 0x11
    2a6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_displayCharacter+0x7ac>
    2a70:	9a 8b       	std	Y+18, r25	; 0x12
    2a72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8b 89       	ldd	r24, Y+19	; 0x13
    2a76:	9c 89       	ldd	r25, Y+20	; 0x14
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9c 8b       	std	Y+20, r25	; 0x14
    2a7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a80:	9c 89       	ldd	r25, Y+20	; 0x14
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <LCD_displayCharacter+0x7a0>
    2a86:	14 c0       	rjmp	.+40     	; 0x2ab0 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9c 8b       	std	Y+20, r25	; 0x14
    2a9a:	8b 8b       	std	Y+19, r24	; 0x13
    2a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa0:	98 8b       	std	Y+16, r25	; 0x10
    2aa2:	8f 87       	std	Y+15, r24	; 0x0f
    2aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aa6:	98 89       	ldd	r25, Y+16	; 0x10
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_displayCharacter+0x7e8>
    2aac:	98 8b       	std	Y+16, r25	; 0x10
    2aae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	62 e0       	ldi	r22, 0x02	; 2
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	0e 94 4c 08 	call	0x1098	; 0x1098 <GPIO_writePin>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	bf e3       	ldi	r27, 0x3F	; 63
    2ac2:	8b 87       	std	Y+11, r24	; 0x0b
    2ac4:	9c 87       	std	Y+12, r25	; 0x0c
    2ac6:	ad 87       	std	Y+13, r26	; 0x0d
    2ac8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	4a e7       	ldi	r20, 0x7A	; 122
    2ad8:	55 e4       	ldi	r21, 0x45	; 69
    2ada:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8f 83       	std	Y+7, r24	; 0x07
    2ae4:	98 87       	std	Y+8, r25	; 0x08
    2ae6:	a9 87       	std	Y+9, r26	; 0x09
    2ae8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	2c f4       	brge	.+10     	; 0x2b0c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
    2b0a:	3f c0       	rjmp	.+126    	; 0x2b8a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0e:	78 85       	ldd	r23, Y+8	; 0x08
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	4c f5       	brge	.+82     	; 0x2b76 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	40 e2       	ldi	r20, 0x20	; 32
    2b32:	51 e4       	ldi	r21, 0x41	; 65
    2b34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	0f c0       	rjmp	.+30     	; 0x2b6c <LCD_displayCharacter+0x8ac>
    2b4e:	80 e9       	ldi	r24, 0x90	; 144
    2b50:	91 e0       	ldi	r25, 0x01	; 1
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	8b 83       	std	Y+3, r24	; 0x03
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_displayCharacter+0x89a>
    2b5e:	9c 83       	std	Y+4, r25	; 0x04
    2b60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	8d 81       	ldd	r24, Y+5	; 0x05
    2b64:	9e 81       	ldd	r25, Y+6	; 0x06
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f7       	brne	.-38     	; 0x2b4e <LCD_displayCharacter+0x88e>
    2b74:	14 c0       	rjmp	.+40     	; 0x2b9e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	9a 83       	std	Y+2, r25	; 0x02
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	9a 81       	ldd	r25, Y+2	; 0x02
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	f1 f7       	brne	.-4      	; 0x2b96 <LCD_displayCharacter+0x8d6>
    2b9a:	9a 83       	std	Y+2, r25	; 0x02
    2b9c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b9e:	cd 59       	subi	r28, 0x9D	; 157
    2ba0:	df 4f       	sbci	r29, 0xFF	; 255
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	1f 91       	pop	r17
    2bb2:	0f 91       	pop	r16
    2bb4:	08 95       	ret

00002bb6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bb6:	df 93       	push	r29
    2bb8:	cf 93       	push	r28
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <LCD_displayString+0x6>
    2bbc:	0f 92       	push	r0
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9b 83       	std	Y+3, r25	; 0x03
    2bc4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bc6:	19 82       	std	Y+1, r1	; 0x01
    2bc8:	0e c0       	rjmp	.+28     	; 0x2be6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e2 0f       	add	r30, r18
    2bd8:	f3 1f       	adc	r31, r19
    2bda:	80 81       	ld	r24, Z
    2bdc:	0e 94 60 11 	call	0x22c0	; 0x22c0 <LCD_displayCharacter>
		i++;
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	8f 5f       	subi	r24, 0xFF	; 255
    2be4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	e2 0f       	add	r30, r18
    2bf4:	f3 1f       	adc	r31, r19
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 23       	and	r24, r24
    2bfa:	39 f7       	brne	.-50     	; 0x2bca <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <LCD_moveCursor+0x6>
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <LCD_moveCursor+0x8>
    2c10:	0f 92       	push	r0
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	8a 83       	std	Y+2, r24	; 0x02
    2c18:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3d 83       	std	Y+5, r19	; 0x05
    2c22:	2c 83       	std	Y+4, r18	; 0x04
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	91 05       	cpc	r25, r1
    2c2c:	c1 f0       	breq	.+48     	; 0x2c5e <LCD_moveCursor+0x56>
    2c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c30:	3d 81       	ldd	r19, Y+5	; 0x05
    2c32:	22 30       	cpi	r18, 0x02	; 2
    2c34:	31 05       	cpc	r19, r1
    2c36:	2c f4       	brge	.+10     	; 0x2c42 <LCD_moveCursor+0x3a>
    2c38:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	61 f0       	breq	.+24     	; 0x2c58 <LCD_moveCursor+0x50>
    2c40:	19 c0       	rjmp	.+50     	; 0x2c74 <LCD_moveCursor+0x6c>
    2c42:	2c 81       	ldd	r18, Y+4	; 0x04
    2c44:	3d 81       	ldd	r19, Y+5	; 0x05
    2c46:	22 30       	cpi	r18, 0x02	; 2
    2c48:	31 05       	cpc	r19, r1
    2c4a:	69 f0       	breq	.+26     	; 0x2c66 <LCD_moveCursor+0x5e>
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	91 05       	cpc	r25, r1
    2c54:	61 f0       	breq	.+24     	; 0x2c6e <LCD_moveCursor+0x66>
    2c56:	0e c0       	rjmp	.+28     	; 0x2c74 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	0b c0       	rjmp	.+22     	; 0x2c74 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	80 5c       	subi	r24, 0xC0	; 192
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	07 c0       	rjmp	.+14     	; 0x2c74 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c66:	8b 81       	ldd	r24, Y+3	; 0x03
    2c68:	80 5f       	subi	r24, 0xF0	; 240
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	80 5b       	subi	r24, 0xB0	; 176
    2c72:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	80 68       	ori	r24, 0x80	; 128
    2c78:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
}
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	08 95       	ret

00002c8c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <LCD_displayStringRowColumn+0x6>
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <LCD_displayStringRowColumn+0x8>
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	6a 83       	std	Y+2, r22	; 0x02
    2c9c:	5c 83       	std	Y+4, r21	; 0x04
    2c9e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ca4:	0e 94 04 16 	call	0x2c08	; 0x2c08 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    2caa:	9c 81       	ldd	r25, Y+4	; 0x04
    2cac:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
}
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	62 97       	sbiw	r28, 0x12	; 18
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	9a 8b       	std	Y+18, r25	; 0x12
    2cd4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cd6:	89 89       	ldd	r24, Y+17	; 0x11
    2cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cda:	9e 01       	movw	r18, r28
    2cdc:	2f 5f       	subi	r18, 0xFF	; 255
    2cde:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce0:	b9 01       	movw	r22, r18
    2ce2:	4a e0       	ldi	r20, 0x0A	; 10
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	0e 94 1d 18 	call	0x303a	; 0x303a <itoa>
   LCD_displayString(buff); /* Display the string */
    2cea:	ce 01       	movw	r24, r28
    2cec:	01 96       	adiw	r24, 0x01	; 1
    2cee:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <LCD_displayString>
}
    2cf2:	62 96       	adiw	r28, 0x12	; 18
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <LCD_sendCommand>
}
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <UART_init>:
 *  4- Modify the Baud Rate equation.
 *	5- setup the UBRRH and UBRRL values.
 *
 */

void UART_init(const UART_ConfigType *Config_Ptr){
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <UART_init+0x6>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <UART_init+0x8>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	9c 83       	std	Y+4, r25	; 0x04
    2d26:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value=0;
    2d28:	1a 82       	std	Y+2, r1	; 0x02
    2d2a:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<< U2X);
    2d2c:	eb e2       	ldi	r30, 0x2B	; 43
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    2d34:	ea e2       	ldi	r30, 0x2A	; 42
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	88 e1       	ldi	r24, 0x18	; 24
    2d3a:	80 83       	st	Z, r24
	 * UCSRC will set to 1, but if the number of bits equal to 9 bits the 2 bits
	 * UCSZ0 and UCSZ1 in register UCSRC will set to 1 and the bit UCSZ2 in register
	 * UCSZ2 will set to 1 else, so this if important for configuration.
	 */

	if(Config_Ptr->bit_data == Frame_9_bit){
    2d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d40:	80 81       	ld	r24, Z
    2d42:	87 30       	cpi	r24, 0x07	; 7
    2d44:	91 f5       	brne	.+100    	; 0x2daa <UART_init+0x92>

		UCSRC = (1<<URSEL) | ((Config_Ptr->parity & 0x03)<<4)
    2d46:	a0 e4       	ldi	r26, 0x40	; 64
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4e:	81 81       	ldd	r24, Z+1	; 0x01
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	83 70       	andi	r24, 0x03	; 3
    2d56:	90 70       	andi	r25, 0x00	; 0
    2d58:	82 95       	swap	r24
    2d5a:	92 95       	swap	r25
    2d5c:	90 7f       	andi	r25, 0xF0	; 240
    2d5e:	98 27       	eor	r25, r24
    2d60:	80 7f       	andi	r24, 0xF0	; 240
    2d62:	98 27       	eor	r25, r24
    2d64:	28 2f       	mov	r18, r24
    2d66:	20 68       	ori	r18, 0x80	; 128
    2d68:	eb 81       	ldd	r30, Y+3	; 0x03
    2d6a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d6c:	82 81       	ldd	r24, Z+2	; 0x02
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	81 70       	andi	r24, 0x01	; 1
    2d74:	90 70       	andi	r25, 0x00	; 0
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	28 2b       	or	r18, r24
    2d84:	eb 81       	ldd	r30, Y+3	; 0x03
    2d86:	fc 81       	ldd	r31, Y+4	; 0x04
    2d88:	80 81       	ld	r24, Z
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	83 70       	andi	r24, 0x03	; 3
    2d90:	90 70       	andi	r25, 0x00	; 0
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	82 2b       	or	r24, r18
    2d98:	8c 93       	st	X, r24
					 | ((Config_Ptr->stop_bit & 0x01)<<3)
					 | ((Config_Ptr->bit_data & 0X03)<<1);

		UCSRB |= (1<< UCSZ2);
    2d9a:	aa e2       	ldi	r26, 0x2A	; 42
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ea e2       	ldi	r30, 0x2A	; 42
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	84 60       	ori	r24, 0x04	; 4
    2da6:	8c 93       	st	X, r24
    2da8:	2a c0       	rjmp	.+84     	; 0x2dfe <UART_init+0xe6>

	}
	else{
		UCSRC = (1<<URSEL) | ((Config_Ptr->parity & 0x03)<<4)
    2daa:	a0 e4       	ldi	r26, 0x40	; 64
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	eb 81       	ldd	r30, Y+3	; 0x03
    2db0:	fc 81       	ldd	r31, Y+4	; 0x04
    2db2:	81 81       	ldd	r24, Z+1	; 0x01
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	83 70       	andi	r24, 0x03	; 3
    2dba:	90 70       	andi	r25, 0x00	; 0
    2dbc:	82 95       	swap	r24
    2dbe:	92 95       	swap	r25
    2dc0:	90 7f       	andi	r25, 0xF0	; 240
    2dc2:	98 27       	eor	r25, r24
    2dc4:	80 7f       	andi	r24, 0xF0	; 240
    2dc6:	98 27       	eor	r25, r24
    2dc8:	28 2f       	mov	r18, r24
    2dca:	20 68       	ori	r18, 0x80	; 128
    2dcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dce:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	88 2f       	mov	r24, r24
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	81 70       	andi	r24, 0x01	; 1
    2dd8:	90 70       	andi	r25, 0x00	; 0
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	28 2b       	or	r18, r24
    2de8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dea:	fc 81       	ldd	r31, Y+4	; 0x04
    2dec:	80 81       	ld	r24, Z
    2dee:	88 2f       	mov	r24, r24
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	83 70       	andi	r24, 0x03	; 3
    2df4:	90 70       	andi	r25, 0x00	; 0
    2df6:	88 0f       	add	r24, r24
    2df8:	99 1f       	adc	r25, r25
    2dfa:	82 2b       	or	r24, r18
    2dfc:	8c 93       	st	X, r24
							 | ((Config_Ptr->stop_bit & 0x01)<<3)
							 | ((Config_Ptr->bit_data & 0X03)<<1);
	}

	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2dfe:	eb 81       	ldd	r30, Y+3	; 0x03
    2e00:	fc 81       	ldd	r31, Y+4	; 0x04
    2e02:	83 81       	ldd	r24, Z+3	; 0x03
    2e04:	94 81       	ldd	r25, Z+4	; 0x04
    2e06:	a5 81       	ldd	r26, Z+5	; 0x05
    2e08:	b6 81       	ldd	r27, Z+6	; 0x06
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	aa 1f       	adc	r26, r26
    2e10:	bb 1f       	adc	r27, r27
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	aa 1f       	adc	r26, r26
    2e18:	bb 1f       	adc	r27, r27
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	aa 1f       	adc	r26, r26
    2e20:	bb 1f       	adc	r27, r27
    2e22:	9c 01       	movw	r18, r24
    2e24:	ad 01       	movw	r20, r26
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	94 e2       	ldi	r25, 0x24	; 36
    2e2a:	a4 ef       	ldi	r26, 0xF4	; 244
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	bc 01       	movw	r22, r24
    2e30:	cd 01       	movw	r24, r26
    2e32:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <__udivmodsi4>
    2e36:	da 01       	movw	r26, r20
    2e38:	c9 01       	movw	r24, r18
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01

	UBRRH = ubrr_value >>8;
    2e40:	e0 e4       	ldi	r30, 0x40	; 64
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
    2e46:	9a 81       	ldd	r25, Y+2	; 0x02
    2e48:	89 2f       	mov	r24, r25
    2e4a:	99 27       	eor	r25, r25
    2e4c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e4e:	e9 e2       	ldi	r30, 0x29	; 41
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	80 83       	st	Z, r24
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	cf 91       	pop	r28
    2e60:	df 91       	pop	r29
    2e62:	08 95       	ret

00002e64 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e70:	eb e2       	ldi	r30, 0x2B	; 43
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	80 72       	andi	r24, 0x20	; 32
    2e7c:	90 70       	andi	r25, 0x00	; 0
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	b9 f3       	breq	.-18     	; 0x2e70 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2e82:	ec e2       	ldi	r30, 0x2C	; 44
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2e9a:	eb e2       	ldi	r30, 0x2B	; 43
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	88 23       	and	r24, r24
    2ea2:	dc f7       	brge	.-10     	; 0x2e9a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2ea4:	ec e2       	ldi	r30, 0x2C	; 44
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
}
    2eaa:	cf 91       	pop	r28
    2eac:	df 91       	pop	r29
    2eae:	08 95       	ret

00002eb0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2eb0:	df 93       	push	r29
    2eb2:	cf 93       	push	r28
    2eb4:	00 d0       	rcall	.+0      	; 0x2eb6 <UART_sendString+0x6>
    2eb6:	0f 92       	push	r0
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	9b 83       	std	Y+3, r25	; 0x03
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ec0:	19 82       	std	Y+1, r1	; 0x01
    2ec2:	0e c0       	rjmp	.+28     	; 0x2ee0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ece:	fc 01       	movw	r30, r24
    2ed0:	e2 0f       	add	r30, r18
    2ed2:	f3 1f       	adc	r31, r19
    2ed4:	80 81       	ld	r24, Z
    2ed6:	0e 94 32 17 	call	0x2e64	; 0x2e64 <UART_sendByte>
		i++;
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eea:	fc 01       	movw	r30, r24
    2eec:	e2 0f       	add	r30, r18
    2eee:	f3 1f       	adc	r31, r19
    2ef0:	80 81       	ld	r24, Z
    2ef2:	88 23       	and	r24, r24
    2ef4:	39 f7       	brne	.-50     	; 0x2ec4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    2ef6:	0f 90       	pop	r0
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f02:	0f 93       	push	r16
    2f04:	1f 93       	push	r17
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <UART_receiveString+0xa>
    2f0c:	0f 92       	push	r0
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	9b 83       	std	Y+3, r25	; 0x03
    2f14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f16:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f20:	9b 81       	ldd	r25, Y+3	; 0x03
    2f22:	8c 01       	movw	r16, r24
    2f24:	02 0f       	add	r16, r18
    2f26:	13 1f       	adc	r17, r19
    2f28:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_recieveByte>
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	80 83       	st	Z, r24
    2f30:	0f c0       	rjmp	.+30     	; 0x2f50 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2f32:	89 81       	ldd	r24, Y+1	; 0x01
    2f34:	8f 5f       	subi	r24, 0xFF	; 255
    2f36:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	28 2f       	mov	r18, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	9b 81       	ldd	r25, Y+3	; 0x03
    2f42:	8c 01       	movw	r16, r24
    2f44:	02 0f       	add	r16, r18
    2f46:	13 1f       	adc	r17, r19
    2f48:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_recieveByte>
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	e2 0f       	add	r30, r18
    2f5e:	f3 1f       	adc	r31, r19
    2f60:	80 81       	ld	r24, Z
    2f62:	83 32       	cpi	r24, 0x23	; 35
    2f64:	31 f7       	brne	.-52     	; 0x2f32 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f70:	fc 01       	movw	r30, r24
    2f72:	e2 0f       	add	r30, r18
    2f74:	f3 1f       	adc	r31, r19
    2f76:	10 82       	st	Z, r1
}
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	08 95       	ret

00002f88 <__udivmodsi4>:
    2f88:	a1 e2       	ldi	r26, 0x21	; 33
    2f8a:	1a 2e       	mov	r1, r26
    2f8c:	aa 1b       	sub	r26, r26
    2f8e:	bb 1b       	sub	r27, r27
    2f90:	fd 01       	movw	r30, r26
    2f92:	0d c0       	rjmp	.+26     	; 0x2fae <__udivmodsi4_ep>

00002f94 <__udivmodsi4_loop>:
    2f94:	aa 1f       	adc	r26, r26
    2f96:	bb 1f       	adc	r27, r27
    2f98:	ee 1f       	adc	r30, r30
    2f9a:	ff 1f       	adc	r31, r31
    2f9c:	a2 17       	cp	r26, r18
    2f9e:	b3 07       	cpc	r27, r19
    2fa0:	e4 07       	cpc	r30, r20
    2fa2:	f5 07       	cpc	r31, r21
    2fa4:	20 f0       	brcs	.+8      	; 0x2fae <__udivmodsi4_ep>
    2fa6:	a2 1b       	sub	r26, r18
    2fa8:	b3 0b       	sbc	r27, r19
    2faa:	e4 0b       	sbc	r30, r20
    2fac:	f5 0b       	sbc	r31, r21

00002fae <__udivmodsi4_ep>:
    2fae:	66 1f       	adc	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	1a 94       	dec	r1
    2fb8:	69 f7       	brne	.-38     	; 0x2f94 <__udivmodsi4_loop>
    2fba:	60 95       	com	r22
    2fbc:	70 95       	com	r23
    2fbe:	80 95       	com	r24
    2fc0:	90 95       	com	r25
    2fc2:	9b 01       	movw	r18, r22
    2fc4:	ac 01       	movw	r20, r24
    2fc6:	bd 01       	movw	r22, r26
    2fc8:	cf 01       	movw	r24, r30
    2fca:	08 95       	ret

00002fcc <__prologue_saves__>:
    2fcc:	2f 92       	push	r2
    2fce:	3f 92       	push	r3
    2fd0:	4f 92       	push	r4
    2fd2:	5f 92       	push	r5
    2fd4:	6f 92       	push	r6
    2fd6:	7f 92       	push	r7
    2fd8:	8f 92       	push	r8
    2fda:	9f 92       	push	r9
    2fdc:	af 92       	push	r10
    2fde:	bf 92       	push	r11
    2fe0:	cf 92       	push	r12
    2fe2:	df 92       	push	r13
    2fe4:	ef 92       	push	r14
    2fe6:	ff 92       	push	r15
    2fe8:	0f 93       	push	r16
    2fea:	1f 93       	push	r17
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	ca 1b       	sub	r28, r26
    2ff6:	db 0b       	sbc	r29, r27
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	09 94       	ijmp

00003004 <__epilogue_restores__>:
    3004:	2a 88       	ldd	r2, Y+18	; 0x12
    3006:	39 88       	ldd	r3, Y+17	; 0x11
    3008:	48 88       	ldd	r4, Y+16	; 0x10
    300a:	5f 84       	ldd	r5, Y+15	; 0x0f
    300c:	6e 84       	ldd	r6, Y+14	; 0x0e
    300e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3010:	8c 84       	ldd	r8, Y+12	; 0x0c
    3012:	9b 84       	ldd	r9, Y+11	; 0x0b
    3014:	aa 84       	ldd	r10, Y+10	; 0x0a
    3016:	b9 84       	ldd	r11, Y+9	; 0x09
    3018:	c8 84       	ldd	r12, Y+8	; 0x08
    301a:	df 80       	ldd	r13, Y+7	; 0x07
    301c:	ee 80       	ldd	r14, Y+6	; 0x06
    301e:	fd 80       	ldd	r15, Y+5	; 0x05
    3020:	0c 81       	ldd	r16, Y+4	; 0x04
    3022:	1b 81       	ldd	r17, Y+3	; 0x03
    3024:	aa 81       	ldd	r26, Y+2	; 0x02
    3026:	b9 81       	ldd	r27, Y+1	; 0x01
    3028:	ce 0f       	add	r28, r30
    302a:	d1 1d       	adc	r29, r1
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	ed 01       	movw	r28, r26
    3038:	08 95       	ret

0000303a <itoa>:
    303a:	fb 01       	movw	r30, r22
    303c:	9f 01       	movw	r18, r30
    303e:	e8 94       	clt
    3040:	42 30       	cpi	r20, 0x02	; 2
    3042:	c4 f0       	brlt	.+48     	; 0x3074 <itoa+0x3a>
    3044:	45 32       	cpi	r20, 0x25	; 37
    3046:	b4 f4       	brge	.+44     	; 0x3074 <itoa+0x3a>
    3048:	4a 30       	cpi	r20, 0x0A	; 10
    304a:	29 f4       	brne	.+10     	; 0x3056 <itoa+0x1c>
    304c:	97 fb       	bst	r25, 7
    304e:	1e f4       	brtc	.+6      	; 0x3056 <itoa+0x1c>
    3050:	90 95       	com	r25
    3052:	81 95       	neg	r24
    3054:	9f 4f       	sbci	r25, 0xFF	; 255
    3056:	64 2f       	mov	r22, r20
    3058:	77 27       	eor	r23, r23
    305a:	0e 94 4e 18 	call	0x309c	; 0x309c <__udivmodhi4>
    305e:	80 5d       	subi	r24, 0xD0	; 208
    3060:	8a 33       	cpi	r24, 0x3A	; 58
    3062:	0c f0       	brlt	.+2      	; 0x3066 <itoa+0x2c>
    3064:	89 5d       	subi	r24, 0xD9	; 217
    3066:	81 93       	st	Z+, r24
    3068:	cb 01       	movw	r24, r22
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	a1 f7       	brne	.-24     	; 0x3056 <itoa+0x1c>
    306e:	16 f4       	brtc	.+4      	; 0x3074 <itoa+0x3a>
    3070:	5d e2       	ldi	r21, 0x2D	; 45
    3072:	51 93       	st	Z+, r21
    3074:	10 82       	st	Z, r1
    3076:	c9 01       	movw	r24, r18
    3078:	0c 94 3e 18 	jmp	0x307c	; 0x307c <strrev>

0000307c <strrev>:
    307c:	dc 01       	movw	r26, r24
    307e:	fc 01       	movw	r30, r24
    3080:	67 2f       	mov	r22, r23
    3082:	71 91       	ld	r23, Z+
    3084:	77 23       	and	r23, r23
    3086:	e1 f7       	brne	.-8      	; 0x3080 <strrev+0x4>
    3088:	32 97       	sbiw	r30, 0x02	; 2
    308a:	04 c0       	rjmp	.+8      	; 0x3094 <strrev+0x18>
    308c:	7c 91       	ld	r23, X
    308e:	6d 93       	st	X+, r22
    3090:	70 83       	st	Z, r23
    3092:	62 91       	ld	r22, -Z
    3094:	ae 17       	cp	r26, r30
    3096:	bf 07       	cpc	r27, r31
    3098:	c8 f3       	brcs	.-14     	; 0x308c <strrev+0x10>
    309a:	08 95       	ret

0000309c <__udivmodhi4>:
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	51 e1       	ldi	r21, 0x11	; 17
    30a2:	07 c0       	rjmp	.+14     	; 0x30b2 <__udivmodhi4_ep>

000030a4 <__udivmodhi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	a6 17       	cp	r26, r22
    30aa:	b7 07       	cpc	r27, r23
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <__udivmodhi4_ep>
    30ae:	a6 1b       	sub	r26, r22
    30b0:	b7 0b       	sbc	r27, r23

000030b2 <__udivmodhi4_ep>:
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	5a 95       	dec	r21
    30b8:	a9 f7       	brne	.-22     	; 0x30a4 <__udivmodhi4_loop>
    30ba:	80 95       	com	r24
    30bc:	90 95       	com	r25
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	08 95       	ret

000030c4 <_exit>:
    30c4:	f8 94       	cli

000030c6 <__stop_program>:
    30c6:	ff cf       	rjmp	.-2      	; 0x30c6 <__stop_program>
